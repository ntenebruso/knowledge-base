#+TITLE: Manpages - nix3-develop.1
#+begin_quote
*Warning*\\
This program is *experimental* and its interface is subject to change.

#+end_quote

* Name
=nix develop= - run a bash shell that provides the build environment of
a derivation

* Synopsis
=nix develop= [/option/...] /installable/

* Examples
- Start a shell with the build environment of the default package of the
  flake in the current directory:

#+begin_example
# nix develop
#+end_example

#+begin_quote
Typical commands to run inside this shell are:

#+end_quote

#+begin_example
# configurePhase
# buildPhase
# installPhase
#+end_example

#+begin_quote
Alternatively, you can run whatever build tools your project uses
directly, e.g. for a typical Unix project:

#+end_quote

#+begin_example
# ./configure --prefix=$out
# make
# make install
#+end_example

- Run a particular build phase directly:

#+begin_example
# nix develop --unpack
# nix develop --configure
# nix develop --build
# nix develop --check
# nix develop --install
# nix develop --installcheck
#+end_example

- Start a shell with the build environment of GNU Hello:

#+begin_example
# nix develop nixpkgs#hello
#+end_example

- Record a build environment in a profile:

#+begin_example
# nix develop --profile /tmp/my-build-env nixpkgs#hello
#+end_example

- Use a build environment previously recorded in a profile:

#+begin_example
# nix develop /tmp/my-build-env
#+end_example

- Replace all occurrences of the store path corresponding to =glibc.dev=
  with a writable directory:

#+begin_example
# nix develop --redirect nixpkgs#glibc.dev ~/my-glibc/outputs/dev
#+end_example

#+begin_quote
Note that this is useful if you're running a =nix develop= shell for
=nixpkgs#glibc= in =~/my-glibc= and want to compile another package
against it.

#+end_quote

- Run a series of script commands:

#+begin_example
# nix develop --command bash -c "mkdir build && cmake .. && make"
#+end_example

* Description
=nix develop= starts a =bash= shell that provides an interactive build
environment nearly identical to what Nix would use to build
/installable/. Inside this shell, environment variables and shell
functions are set up so that you can interactively and incrementally
build your package.

Nix determines the build environment by building a modified version of
the derivation /installable/ that just records the environment
initialised by =stdenv= and exits. This build environment can be
recorded into a profile using =--profile=.

The prompt used by the =bash= shell can be customised by setting the
=bash-prompt=, =bash-prompt-prefix=, and =bash-prompt-suffix= settings
in =nix.conf= or in the flake's =nixConfig= attribute.

* Flake output attributes
If no flake output attribute is given, =nix develop= tries the following
flake output attributes:

- =devShells.<system>.default=

- =packages.<system>.default=

If a flake output /name/ is given, =nix develop= tries the following
flake output attributes:

- =devShells.<system>.<name>=

- =packages.<system>.<name>=

- =legacyPackages.<system>.<name>=

* Options
- =--build=

  Run the =build= phase.

- =--check=

  Run the =check= phase.

- =--command= / =-c= /command/ /args/

  Instead of starting an interactive shell, start the specified command
  and arguments.

- =--configure=

  Run the =configure= phase.

- =--ignore-environment= / =-i=

  Clear the entire environment (except those specified with =--keep=).

- =--install=

  Run the =install= phase.

- =--installcheck=

  Run the =installcheck= phase.

- =--keep= / =-k= /name/

  Keep the environment variable /name/.

- =--phase= /phase-name/

  The stdenv phase to run (e.g. =build= or =configure=).

- =--profile= /path/

  The profile to operate on.

- =--redirect= /installable/ /outputs-dir/

  Redirect a store path to a mutable location.

- =--unpack=

  Run the =unpack= phase.

- =--unset= / =-u= /name/

  Unset the environment variable /name/.

** Common evaluation options
- =--arg= /name/ /expr/

  Pass the value /expr/ as the argument /name/ to Nix functions.

- =--arg-from-file= /name/ /path/

  Pass the contents of file /path/ as the argument /name/ to Nix
  functions.

- =--arg-from-stdin= /name/

  Pass the contents of stdin as the argument /name/ to Nix functions.

- =--argstr= /name/ /string/

  Pass the string /string/ as the argument /name/ to Nix functions.

- =--debugger=

  Start an interactive environment if evaluation fails.

- =--eval-store= /store-url/

  The *URL of the Nix store* to use for evaluation, i.e. to store
  derivations (=.drv= files) and inputs referenced by them.

- =--impure=

  Allow access to mutable paths and repositories.

- =--include= / =-I= /path/

  Add /path/ to search path entries used to resolve *lookup paths*

  This option may be given multiple times.

  Paths added through =-I= take precedence over the =nix-path=
  configuration setting and the =NIX_PATH= environment variable.

- =--override-flake= /original-ref/ /resolved-ref/

  Override the flake registries, redirecting /original-ref/ to
  /resolved-ref/.

** Common flake-related options
- =--commit-lock-file=

  Commit changes to the flake's lock file.

- =--inputs-from= /flake-url/

  Use the inputs of the specified flake as registry entries.

- =--no-registries=

  Don't allow lookups in the flake registries.

  #+begin_quote
  *DEPRECATED*

  #+end_quote

  #+begin_quote
  Use =--no-use-registries= instead.

  #+end_quote

- =--no-update-lock-file=

  Do not allow any updates to the flake's lock file.

- =--no-write-lock-file=

  Do not write the flake's newly generated lock file.

- =--output-lock-file= /flake-lock-path/

  Write the given lock file instead of =flake.lock= within the top-level
  flake.

- =--override-input= /input-path/ /flake-url/

  Override a specific flake input (e.g. =dwarffs/nixpkgs=). This implies
  =--no-write-lock-file=.

- =--recreate-lock-file=

  Recreate the flake's lock file from scratch.

  #+begin_quote
  *DEPRECATED*

  #+end_quote

  #+begin_quote
  Use =nix flake update= instead.

  #+end_quote

- =--reference-lock-file= /flake-lock-path/

  Read the given lock file instead of =flake.lock= within the top-level
  flake.

- =--update-input= /input-path/

  Update a specific flake input (ignoring its previous entry in the lock
  file).

  #+begin_quote
  *DEPRECATED*

  #+end_quote

  #+begin_quote
  Use =nix flake update= instead.

  #+end_quote

** Logging-related options
- =--debug=

  Set the logging verbosity level to â€˜debug'.

- =--log-format= /format/

  Set the format of log output; one of =raw=, =internal-json=, =bar= or
  =bar-with-logs=.

- =--print-build-logs= / =-L=

  Print full build logs on standard error.

- =--quiet=

  Decrease the logging verbosity level.

- =--verbose= / =-v=

  Increase the logging verbosity level.

** Miscellaneous global options
- =--help=

  Show usage information.

- =--offline=

  Disable substituters and consider all previously downloaded files
  up-to-date.

- =--option= /name/ /value/

  Set the Nix configuration setting /name/ to /value/ (overriding
  =nix.conf=).

- =--refresh=

  Consider all previously downloaded files out-of-date.

- =--repair=

  During evaluation, rewrite missing or corrupted files in the Nix
  store. During building, rebuild missing or corrupted store paths.

- =--version=

  Show version information.

** Options that change the interpretation of *installables*
- =--expr= /expr/

  Interpret /installables/ as attribute paths relative to the Nix
  expression /expr/.

- =--file= / =-f= /file/

  Interpret /installables/ as attribute paths relative to the Nix
  expression stored in /file/. If /file/ is the character -, then a Nix
  expression will be read from standard input. Implies =--impure=.

  *Note*

  See =man nix.conf= for overriding configuration settings with command
  line flags.
