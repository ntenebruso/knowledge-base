#+TITLE: Manpages - nix3-registry-pin.1
#+begin_quote
*Warning*\\
This program is *experimental* and its interface is subject to change.

#+end_quote

* Name
=nix registry pin= - pin a flake to its current version or to the
current version of a flake URL

* Synopsis
=nix registry pin= [/option/...] /url/ /locked/

* Examples
- Pin =nixpkgs= to its most recent Git revision:

#+begin_example
# nix registry pin nixpkgs
#+end_example

#+begin_quote
Afterwards the user registry will have an entry like this:

#+end_quote

#+begin_example
nix registry list | grep '^user '
user   flake:nixpkgs github:NixOS/nixpkgs/925b70cd964ceaedee26fde9b19cc4c4f081196a
#+end_example

#+begin_quote
and =nix flake metadata= will say:

#+end_quote

#+begin_example
# nix flake metadata nixpkgs
Resolved URL:  github:NixOS/nixpkgs/925b70cd964ceaedee26fde9b19cc4c4f081196a
Locked URL:    github:NixOS/nixpkgs/925b70cd964ceaedee26fde9b19cc4c4f081196a
…
#+end_example

- Pin =nixpkgs= in a custom registry to its most recent Git revision:

#+begin_example
# nix registry pin --registry ./custom-flake-registry.json nixpkgs
#+end_example

* Description
This command adds an entry to the user registry that maps flake
reference /url/ to the corresponding /locked/ flake reference, that is,
a flake reference that specifies an exact revision or content hash. This
ensures that until this registry entry is removed, all uses of /url/
will resolve to exactly the same flake.

Entries can be removed using =nix registry= remove.

* Options
- =--registry= /registry/

  The registry to operate on.

** Common evaluation options
- =--arg= /name/ /expr/

  Pass the value /expr/ as the argument /name/ to Nix functions.

- =--arg-from-file= /name/ /path/

  Pass the contents of file /path/ as the argument /name/ to Nix
  functions.

- =--arg-from-stdin= /name/

  Pass the contents of stdin as the argument /name/ to Nix functions.

- =--argstr= /name/ /string/

  Pass the string /string/ as the argument /name/ to Nix functions.

- =--debugger=

  Start an interactive environment if evaluation fails.

- =--eval-store= /store-url/

  The *URL of the Nix store* to use for evaluation, i.e. to store
  derivations (=.drv= files) and inputs referenced by them.

- =--impure=

  Allow access to mutable paths and repositories.

- =--include= / =-I= /path/

  Add /path/ to search path entries used to resolve *lookup paths*

  This option may be given multiple times.

  Paths added through =-I= take precedence over the =nix-path=
  configuration setting and the =NIX_PATH= environment variable.

- =--override-flake= /original-ref/ /resolved-ref/

  Override the flake registries, redirecting /original-ref/ to
  /resolved-ref/.

** Logging-related options
- =--debug=

  Set the logging verbosity level to ‘debug'.

- =--log-format= /format/

  Set the format of log output; one of =raw=, =internal-json=, =bar= or
  =bar-with-logs=.

- =--print-build-logs= / =-L=

  Print full build logs on standard error.

- =--quiet=

  Decrease the logging verbosity level.

- =--verbose= / =-v=

  Increase the logging verbosity level.

** Miscellaneous global options
- =--help=

  Show usage information.

- =--offline=

  Disable substituters and consider all previously downloaded files
  up-to-date.

- =--option= /name/ /value/

  Set the Nix configuration setting /name/ to /value/ (overriding
  =nix.conf=).

- =--refresh=

  Consider all previously downloaded files out-of-date.

- =--repair=

  During evaluation, rewrite missing or corrupted files in the Nix
  store. During building, rebuild missing or corrupted store paths.

- =--version=

  Show version information.

  *Note*

  See =man nix.conf= for overriding configuration settings with command
  line flags.
