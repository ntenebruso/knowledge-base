#+TITLE: Manpages - git.1
* NAME
git - the stupid content tracker

* SYNOPSIS
#+begin_example
git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
    [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]
    [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]
    [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]
    <command> [<args>]
#+end_example

* DESCRIPTION
Git is a fast, scalable, distributed revision control system with an
unusually rich command set that provides both high-level operations and
full access to internals.

See *gittutorial*(7) to get started, then see *giteveryday*(7) for a
useful minimum set of commands. The *Git User's Manual*[1] has a more
in-depth introduction.

After you mastered the basic concepts, you can come back to this page to
learn what commands Git offers. You can learn more about individual Git
commands with "git help command". *gitcli*(7) manual page gives you an
overview of the command-line command syntax.

A formatted and hyperlinked copy of the latest Git documentation can be
viewed at *https://git.github.io/htmldocs/git.html* or
*https://git-scm.com/docs*.

* OPTIONS
-v, --version

#+begin_quote
Prints the Git suite version that the /git/ program came from.

This option is internally converted to *git version ...* and accepts the
same options as the *git-version*(1) command. If *--help* is also given,
it takes precedence over *--version*.

#+end_quote

-h, --help

#+begin_quote
Prints the synopsis and a list of the most commonly used commands. If
the option *--all* or *-a* is given then all available commands are
printed. If a Git command is named this option will bring up the manual
page for that command.

Other options are available to control how the manual page is displayed.
See *git-help*(1) for more information, because *git --help ...* is
converted internally into *git help ...*.

#+end_quote

-C <path>

#+begin_quote
Run as if git was started in /<path>/ instead of the current working
directory. When multiple *-C* options are given, each subsequent
non-absolute *-C <path>* is interpreted relative to the preceding *-C
<path>*. If /<path>/ is present but empty, e.g. *-C ""*, then the
current working directory is left unchanged.

This option affects options that expect path name like *--git-dir* and
*--work-tree* in that their interpretations of the path names would be
made relative to the working directory caused by the *-C* option. For
example the following invocations are equivalent:

#+begin_quote
#+begin_example
git --git-dir=a.git --work-tree=b -C c status
git --git-dir=c/a.git --work-tree=c/b status
#+end_example

#+end_quote

#+end_quote

-c <name>=<value>

#+begin_quote
Pass a configuration parameter to the command. The value given will
override values from configuration files. The <name> is expected in the
same format as listed by /git config/ (subkeys separated by dots).

Note that omitting the *=* in *git -c foo.bar ...* is allowed and sets
*foo.bar* to the boolean true value (just like *[foo]bar* would in a
config file). Including the equals but with an empty value (like *git -c
foo.bar= ...*) sets *foo.bar* to the empty string which *git config
--type=bool* will convert to *false*.

#+end_quote

--config-env=<name>=<envvar>

#+begin_quote
Like *-c <name>=<value>*, give configuration variable /<name>/ a value,
where <envvar> is the name of an environment variable from which to
retrieve the value. Unlike *-c* there is no shortcut for directly
setting the value to an empty string, instead the environment variable
itself must be set to the empty string. It is an error if the *<envvar>*
does not exist in the environment. *<envvar>* may not contain an equals
sign to avoid ambiguity with *<name>* containing one.

This is useful for cases where you want to pass transitory configuration
options to git, but are doing so on operating systems where other
processes might be able to read your command line (e.g.
*/proc/self/cmdline*), but not your environment (e.g.
*/proc/self/environ*). That behavior is the default on Linux, but may
not be on your system.

Note that this might add security for variables such as
*http.extraHeader* where the sensitive information is part of the value,
but not e.g. *url.<base>.insteadOf* where the sensitive information can
be part of the key.

#+end_quote

--exec-path[=<path>]

#+begin_quote
Path to wherever your core Git programs are installed. This can also be
controlled by setting the GIT_EXEC_PATH environment variable. If no path
is given, /git/ will print the current setting and then exit.

#+end_quote

--html-path

#+begin_quote
Print the path, without trailing slash, where Git's HTML documentation
is installed and exit.

#+end_quote

--man-path

#+begin_quote
Print the manpath (see *man(1)*) for the man pages for this version of
Git and exit.

#+end_quote

--info-path

#+begin_quote
Print the path where the Info files documenting this version of Git are
installed and exit.

#+end_quote

-p, --paginate

#+begin_quote
Pipe all output into /less/ (or if set, $PAGER) if standard output is a
terminal. This overrides the *pager.<cmd>* configuration options (see
the "Configuration Mechanism" section below).

#+end_quote

-P, --no-pager

#+begin_quote
Do not pipe Git output into a pager.

#+end_quote

--git-dir=<path>

#+begin_quote
Set the path to the repository (".git" directory). This can also be
controlled by setting the *GIT_DIR* environment variable. It can be an
absolute path or relative path to current working directory.

Specifying the location of the ".git" directory using this option (or
*GIT_DIR* environment variable) turns off the repository discovery that
tries to find a directory with ".git" subdirectory (which is how the
repository and the top-level of the working tree are discovered), and
tells Git that you are at the top level of the working tree. If you are
not at the top-level directory of the working tree, you should tell Git
where the top-level of the working tree is, with the
*--work-tree=<path>* option (or *GIT_WORK_TREE* environment variable)

If you just want to run git as if it was started in *<path>* then use
*git -C <path>*.

#+end_quote

--work-tree=<path>

#+begin_quote
Set the path to the working tree. It can be an absolute path or a path
relative to the current working directory. This can also be controlled
by setting the GIT_WORK_TREE environment variable and the core.worktree
configuration variable (see core.worktree in *git-config*(1) for a more
detailed discussion).

#+end_quote

--namespace=<path>

#+begin_quote
Set the Git namespace. See *gitnamespaces*(7) for more details.
Equivalent to setting the *GIT_NAMESPACE* environment variable.

#+end_quote

--bare

#+begin_quote
Treat the repository as a bare repository. If GIT_DIR environment is not
set, it is set to the current working directory.

#+end_quote

--no-replace-objects

#+begin_quote
Do not use replacement refs to replace Git objects. This is equivalent
to exporting the *GIT_NO_REPLACE_OBJECTS* environment variable with any
value. See *git-replace*(1) for more information.

#+end_quote

--no-lazy-fetch

#+begin_quote
Do not fetch missing objects from the promisor remote on demand. Useful
together with *git cat-file -e <object>* to see if the object is locally
available. This is equivalent to setting the *GIT_NO_LAZY_FETCH*
environment variable to *1*.

#+end_quote

--no-optional-locks

#+begin_quote
Do not perform optional operations that require locks. This is
equivalent to setting the *GIT_OPTIONAL_LOCKS* to *0*.

#+end_quote

--no-advice

#+begin_quote
Disable all advice hints from being printed.

#+end_quote

--literal-pathspecs

#+begin_quote
Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is
equivalent to setting the *GIT_LITERAL_PATHSPECS* environment variable
to *1*.

#+end_quote

--glob-pathspecs

#+begin_quote
Add "glob" magic to all pathspec. This is equivalent to setting the
*GIT_GLOB_PATHSPECS* environment variable to *1*. Disabling globbing on
individual pathspecs can be done using pathspec magic ":(literal)"

#+end_quote

--noglob-pathspecs

#+begin_quote
Add "literal" magic to all pathspec. This is equivalent to setting the
*GIT_NOGLOB_PATHSPECS* environment variable to *1*. Enabling globbing on
individual pathspecs can be done using pathspec magic ":(glob)"

#+end_quote

--icase-pathspecs

#+begin_quote
Add "icase" magic to all pathspec. This is equivalent to setting the
*GIT_ICASE_PATHSPECS* environment variable to *1*.

#+end_quote

--list-cmds=<group>[,<group>...]

#+begin_quote
List commands by group. This is an internal/experimental option and may
change or be removed in the future. Supported groups are: builtins,
parseopt (builtin commands that use parse-options), main (all commands
in libexec directory), others (all other commands in *$PATH* that have
git- prefix), list-<category> (see categories in command-list.txt),
nohelpers (exclude helper commands), alias and config (retrieve command
list from config variable completion.commands)

#+end_quote

--attr-source=<tree-ish>

#+begin_quote
Read gitattributes from <tree-ish> instead of the worktree. See
*gitattributes*(5). This is equivalent to setting the *GIT_ATTR_SOURCE*
environment variable.

#+end_quote

* GIT COMMANDS
We divide Git into high level ("porcelain") commands and low level
("plumbing") commands.

* HIGH-LEVEL COMMANDS (PORCELAIN)
We separate the porcelain commands into the main commands and some
ancillary user utilities.

** Main porcelain commands
*git-add*(1)

#+begin_quote
Add file contents to the index.

#+end_quote

*git-am*(1)

#+begin_quote
Apply a series of patches from a mailbox.

#+end_quote

*git-archive*(1)

#+begin_quote
Create an archive of files from a named tree.

#+end_quote

*git-bisect*(1)

#+begin_quote
Use binary search to find the commit that introduced a bug.

#+end_quote

*git-branch*(1)

#+begin_quote
List, create, or delete branches.

#+end_quote

*git-bundle*(1)

#+begin_quote
Move objects and refs by archive.

#+end_quote

*git-checkout*(1)

#+begin_quote
Switch branches or restore working tree files.

#+end_quote

*git-cherry-pick*(1)

#+begin_quote
Apply the changes introduced by some existing commits.

#+end_quote

*git-citool*(1)

#+begin_quote
Graphical alternative to git-commit.

#+end_quote

*git-clean*(1)

#+begin_quote
Remove untracked files from the working tree.

#+end_quote

*git-clone*(1)

#+begin_quote
Clone a repository into a new directory.

#+end_quote

*git-commit*(1)

#+begin_quote
Record changes to the repository.

#+end_quote

*git-describe*(1)

#+begin_quote
Give an object a human readable name based on an available ref.

#+end_quote

*git-diff*(1)

#+begin_quote
Show changes between commits, commit and working tree, etc.

#+end_quote

*git-fetch*(1)

#+begin_quote
Download objects and refs from another repository.

#+end_quote

*git-format-patch*(1)

#+begin_quote
Prepare patches for e-mail submission.

#+end_quote

*git-gc*(1)

#+begin_quote
Cleanup unnecessary files and optimize the local repository.

#+end_quote

*git-grep*(1)

#+begin_quote
Print lines matching a pattern.

#+end_quote

*git-gui*(1)

#+begin_quote
A portable graphical interface to Git.

#+end_quote

*git-init*(1)

#+begin_quote
Create an empty Git repository or reinitialize an existing one.

#+end_quote

*git-log*(1)

#+begin_quote
Show commit logs.

#+end_quote

*git-maintenance*(1)

#+begin_quote
Run tasks to optimize Git repository data.

#+end_quote

*git-merge*(1)

#+begin_quote
Join two or more development histories together.

#+end_quote

*git-mv*(1)

#+begin_quote
Move or rename a file, a directory, or a symlink.

#+end_quote

*git-notes*(1)

#+begin_quote
Add or inspect object notes.

#+end_quote

*git-pull*(1)

#+begin_quote
Fetch from and integrate with another repository or a local branch.

#+end_quote

*git-push*(1)

#+begin_quote
Update remote refs along with associated objects.

#+end_quote

*git-range-diff*(1)

#+begin_quote
Compare two commit ranges (e.g. two versions of a branch).

#+end_quote

*git-rebase*(1)

#+begin_quote
Reapply commits on top of another base tip.

#+end_quote

*git-reset*(1)

#+begin_quote
Reset current HEAD to the specified state.

#+end_quote

*git-restore*(1)

#+begin_quote
Restore working tree files.

#+end_quote

*git-revert*(1)

#+begin_quote
Revert some existing commits.

#+end_quote

*git-rm*(1)

#+begin_quote
Remove files from the working tree and from the index.

#+end_quote

*git-shortlog*(1)

#+begin_quote
Summarize /git log/ output.

#+end_quote

*git-show*(1)

#+begin_quote
Show various types of objects.

#+end_quote

*git-sparse-checkout*(1)

#+begin_quote
Reduce your working tree to a subset of tracked files.

#+end_quote

*git-stash*(1)

#+begin_quote
Stash the changes in a dirty working directory away.

#+end_quote

*git-status*(1)

#+begin_quote
Show the working tree status.

#+end_quote

*git-submodule*(1)

#+begin_quote
Initialize, update or inspect submodules.

#+end_quote

*git-switch*(1)

#+begin_quote
Switch branches.

#+end_quote

*git-tag*(1)

#+begin_quote
Create, list, delete or verify a tag object signed with GPG.

#+end_quote

*git-worktree*(1)

#+begin_quote
Manage multiple working trees.

#+end_quote

*gitk*(1)

#+begin_quote
The Git repository browser.

#+end_quote

*scalar*(1)

#+begin_quote
A tool for managing large Git repositories.

#+end_quote

** Ancillary Commands
Manipulators:

*git-config*(1)

#+begin_quote
Get and set repository or global options.

#+end_quote

*git-fast-export*(1)

#+begin_quote
Git data exporter.

#+end_quote

*git-fast-import*(1)

#+begin_quote
Backend for fast Git data importers.

#+end_quote

*git-filter-branch*(1)

#+begin_quote
Rewrite branches.

#+end_quote

*git-mergetool*(1)

#+begin_quote
Run merge conflict resolution tools to resolve merge conflicts.

#+end_quote

*git-pack-refs*(1)

#+begin_quote
Pack heads and tags for efficient repository access.

#+end_quote

*git-prune*(1)

#+begin_quote
Prune all unreachable objects from the object database.

#+end_quote

*git-reflog*(1)

#+begin_quote
Manage reflog information.

#+end_quote

*git-refs*(1)

#+begin_quote
Low-level access to refs.

#+end_quote

*git-remote*(1)

#+begin_quote
Manage set of tracked repositories.

#+end_quote

*git-repack*(1)

#+begin_quote
Pack unpacked objects in a repository.

#+end_quote

*git-replace*(1)

#+begin_quote
Create, list, delete refs to replace objects.

#+end_quote

Interrogators:

*git-annotate*(1)

#+begin_quote
Annotate file lines with commit information.

#+end_quote

*git-blame*(1)

#+begin_quote
Show what revision and author last modified each line of a file.

#+end_quote

*git-bugreport*(1)

#+begin_quote
Collect information for user to file a bug report.

#+end_quote

*git-count-objects*(1)

#+begin_quote
Count unpacked number of objects and their disk consumption.

#+end_quote

*git-diagnose*(1)

#+begin_quote
Generate a zip archive of diagnostic information.

#+end_quote

*git-difftool*(1)

#+begin_quote
Show changes using common diff tools.

#+end_quote

*git-fsck*(1)

#+begin_quote
Verifies the connectivity and validity of the objects in the database.

#+end_quote

*git-help*(1)

#+begin_quote
Display help information about Git.

#+end_quote

*git-instaweb*(1)

#+begin_quote
Instantly browse your working repository in gitweb.

#+end_quote

*git-merge-tree*(1)

#+begin_quote
Perform merge without touching index or working tree.

#+end_quote

*git-rerere*(1)

#+begin_quote
Reuse recorded resolution of conflicted merges.

#+end_quote

*git-show-branch*(1)

#+begin_quote
Show branches and their commits.

#+end_quote

*git-verify-commit*(1)

#+begin_quote
Check the GPG signature of commits.

#+end_quote

*git-verify-tag*(1)

#+begin_quote
Check the GPG signature of tags.

#+end_quote

*git-version*(1)

#+begin_quote
Display version information about Git.

#+end_quote

*git-whatchanged*(1)

#+begin_quote
Show logs with differences each commit introduces.

#+end_quote

*gitweb*(1)

#+begin_quote
Git web interface (web frontend to Git repositories).

#+end_quote

** Interacting with Others
These commands are to interact with foreign SCM and with other people
via patch over e-mail.

*git-archimport*(1)

#+begin_quote
Import a GNU Arch repository into Git.

#+end_quote

*git-cvsexportcommit*(1)

#+begin_quote
Export a single commit to a CVS checkout.

#+end_quote

*git-cvsimport*(1)

#+begin_quote
Salvage your data out of another SCM people love to hate.

#+end_quote

*git-cvsserver*(1)

#+begin_quote
A CVS server emulator for Git.

#+end_quote

*git-imap-send*(1)

#+begin_quote
Send a collection of patches from stdin to an IMAP folder.

#+end_quote

*git-p4*(1)

#+begin_quote
Import from and submit to Perforce repositories.

#+end_quote

*git-quiltimport*(1)

#+begin_quote
Applies a quilt patchset onto the current branch.

#+end_quote

*git-request-pull*(1)

#+begin_quote
Generates a summary of pending changes.

#+end_quote

*git-send-email*(1)

#+begin_quote
Send a collection of patches as emails.

#+end_quote

*git-svn*(1)

#+begin_quote
Bidirectional operation between a Subversion repository and Git.

#+end_quote

** Reset, restore and revert
There are three commands with similar names: *git reset*, *git restore*
and *git revert*.

#+begin_quote
·

*git-revert*(1) is about making a new commit that reverts the changes
made by other commits.

#+end_quote

#+begin_quote
·

*git-restore*(1) is about restoring files in the working tree from
either the index or another commit. This command does not update your
branch. The command can also be used to restore files in the index from
another commit.

#+end_quote

#+begin_quote
·

*git-reset*(1) is about updating your branch, moving the tip in order to
add or remove commits from the branch. This operation changes the commit
history.

*git reset* can also be used to restore the index, overlapping with *git
restore*.

#+end_quote

* LOW-LEVEL COMMANDS (PLUMBING)
Although Git includes its own porcelain layer, its low-level commands
are sufficient to support development of alternative porcelains.
Developers of such porcelains might start by reading about
*git-update-index*(1) and *git-read-tree*(1).

The interface (input, output, set of options and the semantics) to these
low-level commands are meant to be a lot more stable than Porcelain
level commands, because these commands are primarily for scripted use.
The interface to Porcelain commands on the other hand are subject to
change in order to improve the end user experience.

The following description divides the low-level commands into commands
that manipulate objects (in the repository, index, and working tree),
commands that interrogate and compare objects, and commands that move
objects and references between repositories.

** Manipulation commands
*git-apply*(1)

#+begin_quote
Apply a patch to files and/or to the index.

#+end_quote

*git-checkout-index*(1)

#+begin_quote
Copy files from the index to the working tree.

#+end_quote

*git-commit-graph*(1)

#+begin_quote
Write and verify Git commit-graph files.

#+end_quote

*git-commit-tree*(1)

#+begin_quote
Create a new commit object.

#+end_quote

*git-hash-object*(1)

#+begin_quote
Compute object ID and optionally create an object from a file.

#+end_quote

*git-index-pack*(1)

#+begin_quote
Build pack index file for an existing packed archive.

#+end_quote

*git-merge-file*(1)

#+begin_quote
Run a three-way file merge.

#+end_quote

*git-merge-index*(1)

#+begin_quote
Run a merge for files needing merging.

#+end_quote

*git-mktag*(1)

#+begin_quote
Creates a tag object with extra validation.

#+end_quote

*git-mktree*(1)

#+begin_quote
Build a tree-object from ls-tree formatted text.

#+end_quote

*git-multi-pack-index*(1)

#+begin_quote
Write and verify multi-pack-indexes.

#+end_quote

*git-pack-objects*(1)

#+begin_quote
Create a packed archive of objects.

#+end_quote

*git-prune-packed*(1)

#+begin_quote
Remove extra objects that are already in pack files.

#+end_quote

*git-read-tree*(1)

#+begin_quote
Reads tree information into the index.

#+end_quote

*git-replay*(1)

#+begin_quote
EXPERIMENTAL: Replay commits on a new base, works with bare repos too.

#+end_quote

*git-symbolic-ref*(1)

#+begin_quote
Read, modify and delete symbolic refs.

#+end_quote

*git-unpack-objects*(1)

#+begin_quote
Unpack objects from a packed archive.

#+end_quote

*git-update-index*(1)

#+begin_quote
Register file contents in the working tree to the index.

#+end_quote

*git-update-ref*(1)

#+begin_quote
Update the object name stored in a ref safely.

#+end_quote

*git-write-tree*(1)

#+begin_quote
Create a tree object from the current index.

#+end_quote

** Interrogation commands
*git-cat-file*(1)

#+begin_quote
Provide contents or details of repository objects.

#+end_quote

*git-cherry*(1)

#+begin_quote
Find commits yet to be applied to upstream.

#+end_quote

*git-diff-files*(1)

#+begin_quote
Compares files in the working tree and the index.

#+end_quote

*git-diff-index*(1)

#+begin_quote
Compare a tree to the working tree or index.

#+end_quote

*git-diff-tree*(1)

#+begin_quote
Compares the content and mode of blobs found via two tree objects.

#+end_quote

*git-for-each-ref*(1)

#+begin_quote
Output information on each ref.

#+end_quote

*git-for-each-repo*(1)

#+begin_quote
Run a Git command on a list of repositories.

#+end_quote

*git-get-tar-commit-id*(1)

#+begin_quote
Extract commit ID from an archive created using git-archive.

#+end_quote

*git-ls-files*(1)

#+begin_quote
Show information about files in the index and the working tree.

#+end_quote

*git-ls-remote*(1)

#+begin_quote
List references in a remote repository.

#+end_quote

*git-ls-tree*(1)

#+begin_quote
List the contents of a tree object.

#+end_quote

*git-merge-base*(1)

#+begin_quote
Find as good common ancestors as possible for a merge.

#+end_quote

*git-name-rev*(1)

#+begin_quote
Find symbolic names for given revs.

#+end_quote

*git-pack-redundant*(1)

#+begin_quote
Find redundant pack files.

#+end_quote

*git-rev-list*(1)

#+begin_quote
Lists commit objects in reverse chronological order.

#+end_quote

*git-rev-parse*(1)

#+begin_quote
Pick out and massage parameters.

#+end_quote

*git-show-index*(1)

#+begin_quote
Show packed archive index.

#+end_quote

*git-show-ref*(1)

#+begin_quote
List references in a local repository.

#+end_quote

*git-unpack-file*(1)

#+begin_quote
Creates a temporary file with a blob's contents.

#+end_quote

*git-var*(1)

#+begin_quote
Show a Git logical variable.

#+end_quote

*git-verify-pack*(1)

#+begin_quote
Validate packed Git archive files.

#+end_quote

In general, the interrogate commands do not touch the files in the
working tree.

** Syncing repositories
*git-daemon*(1)

#+begin_quote
A really simple server for Git repositories.

#+end_quote

*git-fetch-pack*(1)

#+begin_quote
Receive missing objects from another repository.

#+end_quote

*git-http-backend*(1)

#+begin_quote
Server side implementation of Git over HTTP.

#+end_quote

*git-send-pack*(1)

#+begin_quote
Push objects over Git protocol to another repository.

#+end_quote

*git-update-server-info*(1)

#+begin_quote
Update auxiliary info file to help dumb servers.

#+end_quote

The following are helper commands used by the above; end users typically
do not use them directly.

*git-http-fetch*(1)

#+begin_quote
Download from a remote Git repository via HTTP.

#+end_quote

*git-http-push*(1)

#+begin_quote
Push objects over HTTP/DAV to another repository.

#+end_quote

*git-receive-pack*(1)

#+begin_quote
Receive what is pushed into the repository.

#+end_quote

*git-shell*(1)

#+begin_quote
Restricted login shell for Git-only SSH access.

#+end_quote

*git-upload-archive*(1)

#+begin_quote
Send archive back to git-archive.

#+end_quote

*git-upload-pack*(1)

#+begin_quote
Send objects packed back to git-fetch-pack.

#+end_quote

** Internal helper commands
These are internal helper commands used by other commands; end users
typically do not use them directly.

*git-check-attr*(1)

#+begin_quote
Display gitattributes information.

#+end_quote

*git-check-ignore*(1)

#+begin_quote
Debug gitignore / exclude files.

#+end_quote

*git-check-mailmap*(1)

#+begin_quote
Show canonical names and email addresses of contacts.

#+end_quote

*git-check-ref-format*(1)

#+begin_quote
Ensures that a reference name is well formed.

#+end_quote

*git-column*(1)

#+begin_quote
Display data in columns.

#+end_quote

*git-credential*(1)

#+begin_quote
Retrieve and store user credentials.

#+end_quote

*git-credential-cache*(1)

#+begin_quote
Helper to temporarily store passwords in memory.

#+end_quote

*git-credential-store*(1)

#+begin_quote
Helper to store credentials on disk.

#+end_quote

*git-fmt-merge-msg*(1)

#+begin_quote
Produce a merge commit message.

#+end_quote

*git-hook*(1)

#+begin_quote
Run git hooks.

#+end_quote

*git-interpret-trailers*(1)

#+begin_quote
Add or parse structured information in commit messages.

#+end_quote

*git-mailinfo*(1)

#+begin_quote
Extracts patch and authorship from a single e-mail message.

#+end_quote

*git-mailsplit*(1)

#+begin_quote
Simple UNIX mbox splitter program.

#+end_quote

*git-merge-one-file*(1)

#+begin_quote
The standard helper program to use with git-merge-index.

#+end_quote

*git-patch-id*(1)

#+begin_quote
Compute unique ID for a patch.

#+end_quote

*git-sh-i18n*(1)

#+begin_quote
Git's i18n setup code for shell scripts.

#+end_quote

*git-sh-setup*(1)

#+begin_quote
Common Git shell script setup code.

#+end_quote

*git-stripspace*(1)

#+begin_quote
Remove unnecessary whitespace.

#+end_quote

* GUIDES
The following documentation pages are guides about Git concepts.

*gitcore-tutorial*(7)

#+begin_quote
A Git core tutorial for developers.

#+end_quote

*gitcredentials*(7)

#+begin_quote
Providing usernames and passwords to Git.

#+end_quote

*gitcvs-migration*(7)

#+begin_quote
Git for CVS users.

#+end_quote

*gitdiffcore*(7)

#+begin_quote
Tweaking diff output.

#+end_quote

*giteveryday*(7)

#+begin_quote
A useful minimum set of commands for Everyday Git.

#+end_quote

*gitfaq*(7)

#+begin_quote
Frequently asked questions about using Git.

#+end_quote

*gitglossary*(7)

#+begin_quote
A Git Glossary.

#+end_quote

*gitnamespaces*(7)

#+begin_quote
Git namespaces.

#+end_quote

*gitremote-helpers*(7)

#+begin_quote
Helper programs to interact with remote repositories.

#+end_quote

*gitsubmodules*(7)

#+begin_quote
Mounting one repository inside another.

#+end_quote

*gittutorial*(7)

#+begin_quote
A tutorial introduction to Git.

#+end_quote

*gittutorial-2*(7)

#+begin_quote
A tutorial introduction to Git: part two.

#+end_quote

*gitworkflows*(7)

#+begin_quote
An overview of recommended workflows with Git.

#+end_quote

* REPOSITORY, COMMAND AND FILE INTERFACES
This documentation discusses repository and command interfaces which
users are expected to interact with directly. See *--user-formats* in
*git-help*(1) for more details on the criteria.

*gitattributes*(5)

#+begin_quote
Defining attributes per path.

#+end_quote

*gitcli*(7)

#+begin_quote
Git command-line interface and conventions.

#+end_quote

*githooks*(5)

#+begin_quote
Hooks used by Git.

#+end_quote

*gitignore*(5)

#+begin_quote
Specifies intentionally untracked files to ignore.

#+end_quote

*gitmailmap*(5)

#+begin_quote
Map author/committer names and/or E-Mail addresses.

#+end_quote

*gitmodules*(5)

#+begin_quote
Defining submodule properties.

#+end_quote

*gitrepository-layout*(5)

#+begin_quote
Git Repository Layout.

#+end_quote

*gitrevisions*(7)

#+begin_quote
Specifying revisions and ranges for Git.

#+end_quote

* FILE FORMATS, PROTOCOLS AND OTHER DEVELOPER INTERFACES
This documentation discusses file formats, over-the-wire protocols and
other git developer interfaces. See *--developer-interfaces* in
*git-help*(1).

*gitformat-bundle*(5)

#+begin_quote
The bundle file format.

#+end_quote

*gitformat-chunk*(5)

#+begin_quote
Chunk-based file formats.

#+end_quote

*gitformat-commit-graph*(5)

#+begin_quote
Git commit-graph format.

#+end_quote

*gitformat-index*(5)

#+begin_quote
Git index format.

#+end_quote

*gitformat-pack*(5)

#+begin_quote
Git pack format.

#+end_quote

*gitformat-signature*(5)

#+begin_quote
Git cryptographic signature formats.

#+end_quote

*gitprotocol-capabilities*(5)

#+begin_quote
Protocol v0 and v1 capabilities.

#+end_quote

*gitprotocol-common*(5)

#+begin_quote
Things common to various protocols.

#+end_quote

*gitprotocol-http*(5)

#+begin_quote
Git HTTP-based protocols.

#+end_quote

*gitprotocol-pack*(5)

#+begin_quote
How packs are transferred over-the-wire.

#+end_quote

*gitprotocol-v2*(5)

#+begin_quote
Git Wire Protocol, Version 2.

#+end_quote

* CONFIGURATION MECHANISM
Git uses a simple text format to store customizations that are per
repository and are per user. Such a configuration file may look like
this:

#+begin_quote
#+begin_example
#
# A # or ; character indicates a comment.
#

; core variables
[core]
        ; Dont trust file modes
        filemode = false

; user identity
[user]
        name = "Junio C Hamano"
        email = "gitster@pobox.com"
#+end_example

#+end_quote

Various commands read from the configuration file and adjust their
operation accordingly. See *git-config*(1) for a list and more details
about the configuration mechanism.

* IDENTIFIER TERMINOLOGY
<object>

#+begin_quote
Indicates the object name for any type of object.

#+end_quote

<blob>

#+begin_quote
Indicates a blob object name.

#+end_quote

<tree>

#+begin_quote
Indicates a tree object name.

#+end_quote

<commit>

#+begin_quote
Indicates a commit object name.

#+end_quote

<tree-ish>

#+begin_quote
Indicates a tree, commit or tag object name. A command that takes a
<tree-ish> argument ultimately wants to operate on a <tree> object but
automatically dereferences <commit> and <tag> objects that point at a
<tree>.

#+end_quote

<commit-ish>

#+begin_quote
Indicates a commit or tag object name. A command that takes a
<commit-ish> argument ultimately wants to operate on a <commit> object
but automatically dereferences <tag> objects that point at a <commit>.

#+end_quote

<type>

#+begin_quote
Indicates that an object type is required. Currently one of: *blob*,
*tree*, *commit*, or *tag*.

#+end_quote

<file>

#+begin_quote
Indicates a filename - almost always relative to the root of the tree
structure *GIT_INDEX_FILE* describes.

#+end_quote

* SYMBOLIC IDENTIFIERS
Any Git command accepting any <object> can also use the following
symbolic notation:

HEAD

#+begin_quote
indicates the head of the current branch.

#+end_quote

<tag>

#+begin_quote
a valid tag /name/ (i.e. a *refs/tags/<tag>* reference).

#+end_quote

<head>

#+begin_quote
a valid head /name/ (i.e. a *refs/heads/<head>* reference).

#+end_quote

For a more complete list of ways to spell object names, see "SPECIFYING
REVISIONS" section in *gitrevisions*(7).

* FILE/DIRECTORY STRUCTURE
Please see the *gitrepository-layout*(5) document.

Read *githooks*(5) for more details about each hook.

Higher level SCMs may provide and manage additional information in the
*$GIT_DIR*.

* TERMINOLOGY
Please see *gitglossary*(7).

* ENVIRONMENT VARIABLES
Various Git commands pay attention to environment variables and change
their behavior. The environment variables marked as "Boolean" take their
values the same way as Boolean valued configuration variables, e.g.
"true", "yes", "on" and positive numbers are taken as "yes".

Here are the variables:

** The Git Repository
These environment variables apply to /all/ core Git commands. Nb: it is
worth noting that they may be used/overridden by SCMS sitting above Git
so take care if using a foreign front-end.

*GIT_INDEX_FILE*

#+begin_quote
This environment variable specifies an alternate index file. If not
specified, the default of *$GIT_DIR/index* is used.

#+end_quote

*GIT_INDEX_VERSION*

#+begin_quote
This environment variable specifies what index version is used when
writing the index file out. It won't affect existing index files. By
default index file version 2 or 3 is used. See *git-update-index*(1) for
more information.

#+end_quote

*GIT_OBJECT_DIRECTORY*

#+begin_quote
If the object storage directory is specified via this environment
variable then the sha1 directories are created underneath - otherwise
the default *$GIT_DIR/objects* directory is used.

#+end_quote

*GIT_ALTERNATE_OBJECT_DIRECTORIES*

#+begin_quote
Due to the immutable nature of Git objects, old objects can be archived
into shared, read-only directories. This variable specifies a ":"
separated (on Windows ";" separated) list of Git object directories
which can be used to search for Git objects. New objects will not be
written to these directories.

Entries that begin with *"* (double-quote) will be interpreted as
C-style quoted paths, removing leading and trailing double-quotes and
respecting backslash escapes. E.g., the value
*"path-with-\"-and-:-in-it":vanilla-path* has two paths:
*path-with-"-and-:-in-it* and *vanilla-path*.

#+end_quote

*GIT_DIR*

#+begin_quote
If the *GIT_DIR* environment variable is set then it specifies a path to
use instead of the default *.git* for the base of the repository. The
*--git-dir* command-line option also sets this value.

#+end_quote

*GIT_WORK_TREE*

#+begin_quote
Set the path to the root of the working tree. This can also be
controlled by the *--work-tree* command-line option and the
core.worktree configuration variable.

#+end_quote

*GIT_NAMESPACE*

#+begin_quote
Set the Git namespace; see *gitnamespaces*(7) for details. The
*--namespace* command-line option also sets this value.

#+end_quote

*GIT_CEILING_DIRECTORIES*

#+begin_quote
This should be a colon-separated list of absolute paths. If set, it is a
list of directories that Git should not chdir up into while looking for
a repository directory (useful for excluding slow-loading network
directories). It will not exclude the current working directory or a
GIT_DIR set on the command line or in the environment. Normally, Git has
to read the entries in this list and resolve any symlink that might be
present in order to compare them with the current directory. However, if
even this access is slow, you can add an empty entry to the list to tell
Git that the subsequent entries are not symlinks and needn't be
resolved; e.g.,
*GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink*.

#+end_quote

*GIT_DISCOVERY_ACROSS_FILESYSTEM*

#+begin_quote
When run in a directory that does not have ".git" repository directory,
Git tries to find such a directory in the parent directories to find the
top of the working tree, but by default it does not cross filesystem
boundaries. This Boolean environment variable can be set to true to tell
Git not to stop at filesystem boundaries. Like
*GIT_CEILING_DIRECTORIES*, this will not affect an explicit repository
directory set via *GIT_DIR* or on the command line.

#+end_quote

*GIT_COMMON_DIR*

#+begin_quote
If this variable is set to a path, non-worktree files that are normally
in $GIT_DIR will be taken from this path instead. Worktree-specific
files such as HEAD or index are taken from $GIT_DIR. See
*gitrepository-layout*(5) and *git-worktree*(1) for details. This
variable has lower precedence than other path variables such as
GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY...

#+end_quote

*GIT_DEFAULT_HASH*

#+begin_quote
If this variable is set, the default hash algorithm for new repositories
will be set to this value. This value is ignored when cloning and the
setting of the remote repository is always used. The default is "sha1".
See *--object-format* in *git-init*(1).

#+end_quote

*GIT_DEFAULT_REF_FORMAT*

#+begin_quote
If this variable is set, the default reference backend format for new
repositories will be set to this value. The default is "files". See
*--ref-format* in *git-init*(1).

#+end_quote

** Git Commits
*GIT_AUTHOR_NAME*

#+begin_quote
The human-readable name used in the author identity when creating commit
or tag objects, or when writing reflogs. Overrides the *user.name* and
*author.name* configuration settings.

#+end_quote

*GIT_AUTHOR_EMAIL*

#+begin_quote
The email address used in the author identity when creating commit or
tag objects, or when writing reflogs. Overrides the *user.email* and
*author.email* configuration settings.

#+end_quote

*GIT_AUTHOR_DATE*

#+begin_quote
The date used for the author identity when creating commit or tag
objects, or when writing reflogs. See *git-commit*(1) for valid formats.

#+end_quote

*GIT_COMMITTER_NAME*

#+begin_quote
The human-readable name used in the committer identity when creating
commit or tag objects, or when writing reflogs. Overrides the
*user.name* and *committer.name* configuration settings.

#+end_quote

*GIT_COMMITTER_EMAIL*

#+begin_quote
The email address used in the author identity when creating commit or
tag objects, or when writing reflogs. Overrides the *user.email* and
*committer.email* configuration settings.

#+end_quote

*GIT_COMMITTER_DATE*

#+begin_quote
The date used for the committer identity when creating commit or tag
objects, or when writing reflogs. See *git-commit*(1) for valid formats.

#+end_quote

*EMAIL*

#+begin_quote
The email address used in the author and committer identities if no
other relevant environment variable or configuration setting has been
set.

#+end_quote

** Git Diffs
*GIT_DIFF_OPTS*

#+begin_quote
Only valid setting is "--unified=??" or "-u??" to set the number of
context lines shown when a unified diff is created. This takes
precedence over any "-U" or "--unified" option value passed on the Git
diff command line.

#+end_quote

*GIT_EXTERNAL_DIFF*

#+begin_quote
When the environment variable *GIT_EXTERNAL_DIFF* is set, the program
named by it is called to generate diffs, and Git does not use its
builtin diff machinery. For a path that is added, removed, or modified,
*GIT_EXTERNAL_DIFF* is called with 7 parameters:

#+begin_quote
#+begin_example
path old-file old-hex old-mode new-file new-hex new-mode
#+end_example

#+end_quote

where:

#+end_quote

<old|new>-file

#+begin_quote
are files GIT_EXTERNAL_DIFF can use to read the contents of <old|new>,

#+end_quote

<old|new>-hex

#+begin_quote
are the 40-hexdigit SHA-1 hashes,

#+end_quote

<old|new>-mode

#+begin_quote
are the octal representation of the file modes.

The file parameters can point at the user's working file (e.g.
*new-file* in "git-diff-files"), */dev/null* (e.g. *old-file* when a new
file is added), or a temporary file (e.g. *old-file* in the index).
*GIT_EXTERNAL_DIFF* should not worry about unlinking the temporary file
--- it is removed when *GIT_EXTERNAL_DIFF* exits.

For a path that is unmerged, *GIT_EXTERNAL_DIFF* is called with 1
parameter, <path>.

For each path *GIT_EXTERNAL_DIFF* is called, two environment variables,
*GIT_DIFF_PATH_COUNTER* and *GIT_DIFF_PATH_TOTAL* are set.

#+end_quote

*GIT_EXTERNAL_DIFF_TRUST_EXIT_CODE*

#+begin_quote
If this Boolean environment variable is set to true then the
*GIT_EXTERNAL_DIFF* command is expected to return exit code 0 if it
considers the input files to be equal or 1 if it considers them to be
different, like *diff(1)*. If it is set to false, which is the default,
then the command is expected to return exit code 0 regardless of
equality. Any other exit code causes Git to report a fatal error.

#+end_quote

*GIT_DIFF_PATH_COUNTER*

#+begin_quote
A 1-based counter incremented by one for every path.

#+end_quote

*GIT_DIFF_PATH_TOTAL*

#+begin_quote
The total number of paths.

#+end_quote

** other
*GIT_MERGE_VERBOSITY*

#+begin_quote
A number controlling the amount of output shown by the recursive merge
strategy. Overrides merge.verbosity. See *git-merge*(1)

#+end_quote

*GIT_PAGER*

#+begin_quote
This environment variable overrides *$PAGER*. If it is set to an empty
string or to the value "cat", Git will not launch a pager. See also the
*core.pager* option in *git-config*(1).

#+end_quote

*GIT_PROGRESS_DELAY*

#+begin_quote
A number controlling how many seconds to delay before showing optional
progress indicators. Defaults to 2.

#+end_quote

*GIT_EDITOR*

#+begin_quote
This environment variable overrides *$EDITOR* and *$VISUAL*. It is used
by several Git commands when, on interactive mode, an editor is to be
launched. See also *git-var*(1) and the *core.editor* option in
*git-config*(1).

#+end_quote

*GIT_SEQUENCE_EDITOR*

#+begin_quote
This environment variable overrides the configured Git editor when
editing the todo list of an interactive rebase. See also *git-rebase*(1)
and the *sequence.editor* option in *git-config*(1).

#+end_quote

*GIT_SSH*, *GIT_SSH_COMMAND*

#+begin_quote
If either of these environment variables is set then /git fetch/ and
/git push/ will use the specified command instead of /ssh/ when they
need to connect to a remote system. The command-line parameters passed
to the configured command are determined by the ssh variant. See
*ssh.variant* option in *git-config*(1) for details.

*$GIT_SSH_COMMAND* takes precedence over *$GIT_SSH*, and is interpreted
by the shell, which allows additional arguments to be included.
*$GIT_SSH* on the other hand must be just the path to a program (which
can be a wrapper shell script, if additional arguments are needed).

Usually it is easier to configure any desired options through your
personal *.ssh/config* file. Please consult your ssh documentation for
further details.

#+end_quote

*GIT_SSH_VARIANT*

#+begin_quote
If this environment variable is set, it overrides Git's autodetection
whether *GIT_SSH*/*GIT_SSH_COMMAND*/*core.sshCommand* refer to OpenSSH,
plink or tortoiseplink. This variable overrides the config setting
*ssh.variant* that serves the same purpose.

#+end_quote

*GIT_SSL_NO_VERIFY*

#+begin_quote
Setting and exporting this environment variable to any value tells Git
not to verify the SSL certificate when fetching or pushing over HTTPS.

#+end_quote

*GIT_ATTR_SOURCE*

#+begin_quote
Sets the treeish that gitattributes will be read from.

#+end_quote

*GIT_ASKPASS*

#+begin_quote
If this environment variable is set, then Git commands which need to
acquire passwords or passphrases (e.g. for HTTP or IMAP authentication)
will call this program with a suitable prompt as command-line argument
and read the password from its STDOUT. See also the *core.askPass*
option in *git-config*(1).

#+end_quote

*GIT_TERMINAL_PROMPT*

#+begin_quote
If this Boolean environment variable is set to false, git will not
prompt on the terminal (e.g., when asking for HTTP authentication).

#+end_quote

*GIT_CONFIG_GLOBAL*, *GIT_CONFIG_SYSTEM*

#+begin_quote
Take the configuration from the given files instead from global or
system-level configuration files. If *GIT_CONFIG_SYSTEM* is set, the
system config file defined at build time (usually */etc/gitconfig*) will
not be read. Likewise, if *GIT_CONFIG_GLOBAL* is set, neither
*$HOME/.gitconfig* nor *$XDG_CONFIG_HOME/git/config* will be read. Can
be set to */dev/null* to skip reading configuration files of the
respective level.

#+end_quote

*GIT_CONFIG_NOSYSTEM*

#+begin_quote
Whether to skip reading settings from the system-wide
*$(prefix)/etc/gitconfig* file. This Boolean environment variable can be
used along with *$HOME* and *$XDG_CONFIG_HOME* to create a predictable
environment for a picky script, or you can set it to true to temporarily
avoid using a buggy */etc/gitconfig* file while waiting for someone with
sufficient permissions to fix it.

#+end_quote

*GIT_FLUSH*

#+begin_quote
If this Boolean environment variable is set to true, then commands such
as /git blame/ (in incremental mode), /git rev-list/, /git log/, /git
check-attr/ and /git check-ignore/ will force a flush of the output
stream after each record have been flushed. If this variable is set to
false, the output of these commands will be done using completely
buffered I/O. If this environment variable is not set, Git will choose
buffered or record-oriented flushing based on whether stdout appears to
be redirected to a file or not.

#+end_quote

*GIT_TRACE*

#+begin_quote
Enables general trace messages, e.g. alias expansion, built-in command
execution and external command execution.

If this variable is set to "1", "2" or "true" (comparison is case
insensitive), trace messages will be printed to stderr.

If the variable is set to an integer value greater than 2 and lower than
10 (strictly) then Git will interpret this value as an open file
descriptor and will try to write the trace messages into this file
descriptor.

Alternatively, if the variable is set to an absolute path (starting with
a /// character), Git will interpret this as a file path and will try to
append the trace messages to it.

Unsetting the variable, or setting it to empty, "0" or "false" (case
insensitive) disables trace messages.

#+end_quote

*GIT_TRACE_FSMONITOR*

#+begin_quote
Enables trace messages for the filesystem monitor extension. See
*GIT_TRACE* for available trace output options.

#+end_quote

*GIT_TRACE_PACK_ACCESS*

#+begin_quote
Enables trace messages for all accesses to any packs. For each access,
the pack file name and an offset in the pack is recorded. This may be
helpful for troubleshooting some pack-related performance problems. See
*GIT_TRACE* for available trace output options.

#+end_quote

*GIT_TRACE_PACKET*

#+begin_quote
Enables trace messages for all packets coming in or out of a given
program. This can help with debugging object negotiation or other
protocol issues. Tracing is turned off at a packet starting with "PACK"
(but see *GIT_TRACE_PACKFILE* below). See *GIT_TRACE* for available
trace output options.

#+end_quote

*GIT_TRACE_PACKFILE*

#+begin_quote
Enables tracing of packfiles sent or received by a given program. Unlike
other trace output, this trace is verbatim: no headers, and no quoting
of binary data. You almost certainly want to direct into a file (e.g.,
*GIT_TRACE_PACKFILE=/tmp/my.pack*) rather than displaying it on the
terminal or mixing it with other trace output.

Note that this is currently only implemented for the client side of
clones and fetches.

#+end_quote

*GIT_TRACE_PERFORMANCE*

#+begin_quote
Enables performance related trace messages, e.g. total execution time of
each Git command. See *GIT_TRACE* for available trace output options.

#+end_quote

*GIT_TRACE_REFS*

#+begin_quote
Enables trace messages for operations on the ref database. See
*GIT_TRACE* for available trace output options.

#+end_quote

*GIT_TRACE_SETUP*

#+begin_quote
Enables trace messages printing the .git, working tree and current
working directory after Git has completed its setup phase. See
*GIT_TRACE* for available trace output options.

#+end_quote

*GIT_TRACE_SHALLOW*

#+begin_quote
Enables trace messages that can help debugging fetching / cloning of
shallow repositories. See *GIT_TRACE* for available trace output
options.

#+end_quote

*GIT_TRACE_CURL*

#+begin_quote
Enables a curl full trace dump of all incoming and outgoing data,
including descriptive information, of the git transport protocol. This
is similar to doing curl *--trace-ascii* on the command line. See
*GIT_TRACE* for available trace output options.

#+end_quote

*GIT_TRACE_CURL_NO_DATA*

#+begin_quote
When a curl trace is enabled (see *GIT_TRACE_CURL* above), do not dump
data (that is, only dump info lines and headers).

#+end_quote

*GIT_TRACE2*

#+begin_quote
Enables more detailed trace messages from the "trace2" library. Output
from *GIT_TRACE2* is a simple text-based format for human readability.

If this variable is set to "1", "2" or "true" (comparison is case
insensitive), trace messages will be printed to stderr.

If the variable is set to an integer value greater than 2 and lower than
10 (strictly) then Git will interpret this value as an open file
descriptor and will try to write the trace messages into this file
descriptor.

Alternatively, if the variable is set to an absolute path (starting with
a /// character), Git will interpret this as a file path and will try to
append the trace messages to it. If the path already exists and is a
directory, the trace messages will be written to files (one per process)
in that directory, named according to the last component of the SID and
an optional counter (to avoid filename collisions).

In addition, if the variable is set to
*af_unix:[<socket-type>:]<absolute-pathname>*, Git will try to open the
path as a Unix Domain Socket. The socket type can be either *stream* or
*dgram*.

Unsetting the variable, or setting it to empty, "0" or "false" (case
insensitive) disables trace messages.

See *Trace2 documentation*[2] for full details.

#+end_quote

*GIT_TRACE2_EVENT*

#+begin_quote
This setting writes a JSON-based format that is suited for machine
interpretation. See *GIT_TRACE2* for available trace output options and
*Trace2 documentation*[2] for full details.

#+end_quote

*GIT_TRACE2_PERF*

#+begin_quote
In addition to the text-based messages available in *GIT_TRACE2*, this
setting writes a column-based format for understanding nesting regions.
See *GIT_TRACE2* for available trace output options and *Trace2
documentation*[2] for full details.

#+end_quote

*GIT_TRACE_REDACT*

#+begin_quote
By default, when tracing is activated, Git redacts the values of
cookies, the "Authorization:" header, the "Proxy-Authorization:" header
and packfile URIs. Set this Boolean environment variable to false to
prevent this redaction.

#+end_quote

*GIT_NO_REPLACE_OBJECTS*

#+begin_quote
Setting and exporting this environment variable tells Git to ignore
replacement refs and do not replace Git objects.

#+end_quote

*GIT_LITERAL_PATHSPECS*

#+begin_quote
Setting this Boolean environment variable to true will cause Git to
treat all pathspecs literally, rather than as glob patterns. For
example, running *GIT_LITERAL_PATHSPECS=1 git log -- *.c* will search
for commits that touch the path **.c*, not any paths that the glob **.c*
matches. You might want this if you are feeding literal paths to Git
(e.g., paths previously given to you by *git ls-tree*, *--raw* diff
output, etc).

#+end_quote

*GIT_GLOB_PATHSPECS*

#+begin_quote
Setting this Boolean environment variable to true will cause Git to
treat all pathspecs as glob patterns (aka "glob" magic).

#+end_quote

*GIT_NOGLOB_PATHSPECS*

#+begin_quote
Setting this Boolean environment variable to true will cause Git to
treat all pathspecs as literal (aka "literal" magic).

#+end_quote

*GIT_ICASE_PATHSPECS*

#+begin_quote
Setting this Boolean environment variable to true will cause Git to
treat all pathspecs as case-insensitive.

#+end_quote

*GIT_NO_LAZY_FETCH*

#+begin_quote
Setting this Boolean environment variable to true tells Git not to
lazily fetch missing objects from the promisor remote on demand.

#+end_quote

*GIT_REFLOG_ACTION*

#+begin_quote
When a ref is updated, reflog entries are created to keep track of the
reason why the ref was updated (which is typically the name of the
high-level command that updated the ref), in addition to the old and new
values of the ref. A scripted Porcelain command can use
set_reflog_action helper function in *git-sh-setup* to set its name to
this variable when it is invoked as the top level command by the end
user, to be recorded in the body of the reflog.

#+end_quote

*GIT_REF_PARANOIA*

#+begin_quote
If this Boolean environment variable is set to false, ignore broken or
badly named refs when iterating over lists of refs. Normally Git will
try to include any such refs, which may cause some operations to fail.
This is usually preferable, as potentially destructive operations (e.g.,
*git-prune*(1)) are better off aborting rather than ignoring broken refs
(and thus considering the history they point to as not worth saving).
The default value is *1* (i.e., be paranoid about detecting and aborting
all operations). You should not normally need to set this to *0*, but it
may be useful when trying to salvage data from a corrupted repository.

#+end_quote

*GIT_COMMIT_GRAPH_PARANOIA*

#+begin_quote
When loading a commit object from the commit-graph, Git performs an
existence check on the object in the object database. This is done to
avoid issues with stale commit-graphs that contain references to
already-deleted commits, but comes with a performance penalty.

The default is "false", which disables the aforementioned behavior.
Setting this to "true" enables the existence check so that stale commits
will never be returned from the commit-graph at the cost of performance.

#+end_quote

*GIT_ALLOW_PROTOCOL*

#+begin_quote
If set to a colon-separated list of protocols, behave as if
*protocol.allow* is set to *never*, and each of the listed protocols has
*protocol.<name>.allow* set to *always* (overriding any existing
configuration). See the description of *protocol.allow* in
*git-config*(1) for more details.

#+end_quote

*GIT_PROTOCOL_FROM_USER*

#+begin_quote
Set this Boolean environment variable to false to prevent protocols used
by fetch/push/clone which are configured to the *user* state. This is
useful to restrict recursive submodule initialization from an untrusted
repository or for programs which feed potentially-untrusted URLS to git
commands. See *git-config*(1) for more details.

#+end_quote

*GIT_PROTOCOL*

#+begin_quote
For internal use only. Used in handshaking the wire protocol. Contains a
colon /:/ separated list of keys with optional values /<key>[=<value>]/.
Presence of unknown keys and values must be ignored.

Note that servers may need to be configured to allow this variable to
pass over some transports. It will be propagated automatically when
accessing local repositories (i.e., *file://* or a filesystem path), as
well as over the *git://* protocol. For git-over-http, it should work
automatically in most configurations, but see the discussion in
*git-http-backend*(1). For git-over-ssh, the ssh server may need to be
configured to allow clients to pass this variable (e.g., by using
*AcceptEnv GIT_PROTOCOL* with OpenSSH).

This configuration is optional. If the variable is not propagated, then
clients will fall back to the original "v0" protocol (but may miss out
on some performance improvements or features). This variable currently
only affects clones and fetches; it is not yet used for pushes (but may
be in the future).

#+end_quote

*GIT_OPTIONAL_LOCKS*

#+begin_quote
If this Boolean environment variable is set to false, Git will complete
any requested operation without performing any optional sub-operations
that require taking a lock. For example, this will prevent *git status*
from refreshing the index as a side effect. This is useful for processes
running in the background which do not want to cause lock contention
with other operations on the repository. Defaults to *1*.

#+end_quote

*GIT_REDIRECT_STDIN*, *GIT_REDIRECT_STDOUT*, *GIT_REDIRECT_STDERR*

#+begin_quote
Windows-only: allow redirecting the standard input/output/error handles
to paths specified by the environment variables. This is particularly
useful in multi-threaded applications where the canonical way to pass
standard handles via *CreateProcess()* is not an option because it would
require the handles to be marked inheritable (and consequently *every*
spawned process would inherit them, possibly blocking regular Git
operations). The primary intended use case is to use named pipes for
communication (e.g. *\\.\pipe\my-git-stdin-123*).

Two special values are supported: *off* will simply close the
corresponding standard handle, and if *GIT_REDIRECT_STDERR* is *2>&1*,
standard error will be redirected to the same handle as standard output.

#+end_quote

*GIT_PRINT_SHA1_ELLIPSIS* (deprecated)

#+begin_quote
If set to *yes*, print an ellipsis following an (abbreviated) SHA-1
value. This affects indications of detached HEADs (*git-checkout*(1))
and the raw diff output (*git-diff*(1)). Printing an ellipsis in the
cases mentioned is no longer considered adequate and support for it is
likely to be removed in the foreseeable future (along with the
variable).

#+end_quote

* DISCUSSION
More detail on the following is available from the *Git concepts chapter
of the user-manual*[3] and *gitcore-tutorial*(7).

A Git project normally consists of a working directory with a ".git"
subdirectory at the top level. The .git directory contains, among other
things, a compressed object database representing the complete history
of the project, an "index" file which links that history to the current
contents of the working tree, and named pointers into that history such
as tags and branch heads.

The object database contains objects of three main types: blobs, which
hold file data; trees, which point to blobs and other trees to build up
directory hierarchies; and commits, which each reference a single tree
and some number of parent commits.

The commit, equivalent to what other systems call a "changeset" or
"version", represents a step in the project's history, and each parent
represents an immediately preceding step. Commits with more than one
parent represent merges of independent lines of development.

All objects are named by the SHA-1 hash of their contents, normally
written as a string of 40 hex digits. Such names are globally unique.
The entire history leading up to a commit can be vouched for by signing
just that commit. A fourth object type, the tag, is provided for this
purpose.

When first created, objects are stored in individual files, but for
efficiency may later be compressed together into "pack files".

Named pointers called refs mark interesting points in history. A ref may
contain the SHA-1 name of an object or the name of another ref (the
latter is called a "symbolic ref"). Refs with names beginning
*refs/head/* contain the SHA-1 name of the most recent commit (or
"head") of a branch under development. SHA-1 names of tags of interest
are stored under *refs/tags/*. A symbolic ref named *HEAD* contains the
name of the currently checked-out branch.

The index file is initialized with a list of all paths and, for each
path, a blob object and a set of attributes. The blob object represents
the contents of the file as of the head of the current branch. The
attributes (last modified time, size, etc.) are taken from the
corresponding file in the working tree. Subsequent changes to the
working tree can be found by comparing these attributes. The index may
be updated with new content, and new commits may be created from the
content stored in the index.

The index is also capable of storing multiple entries (called "stages")
for a given pathname. These stages are used to hold the various unmerged
version of a file when a merge is in progress.

* SECURITY
Some configuration options and hook files may cause Git to run arbitrary
shell commands. Because configuration and hooks are not copied using
*git clone*, it is generally safe to clone remote repositories with
untrusted content, inspect them with *git log*, and so on.

However, it is not safe to run Git commands in a *.git* directory (or
the working tree that surrounds it) when that *.git* directory itself
comes from an untrusted source. The commands in its config and hooks are
executed in the usual way.

By default, Git will refuse to run when the repository is owned by
someone other than the user running the command. See the entry for
*safe.directory* in *git-config*(1). While this can help protect you in
a multi-user environment, note that you can also acquire untrusted
repositories that are owned by you (for example, if you extract a zip
file or tarball from an untrusted source). In such cases, you'd need to
"sanitize" the untrusted repository first.

If you have an untrusted *.git* directory, you should first clone it
with *git clone --no-local* to obtain a clean copy. Git does restrict
the set of options and hooks that will be run by *upload-pack*, which
handles the server side of a clone or fetch, but beware that the surface
area for attack against *upload-pack* is large, so this does carry some
risk. The safest thing is to serve the repository as an unprivileged
user (either via *git-daemon*(1), ssh, or using other tools to change
user ids). See the discussion in the *SECURITY* section of
*git-upload-pack*(1).

* FURTHER DOCUMENTATION
See the references in the "description" section to get started using
Git. The following is probably more detail than necessary for a
first-time user.

The *Git concepts chapter of the user-manual*[3] and
*gitcore-tutorial*(7) both provide introductions to the underlying Git
architecture.

See *gitworkflows*(7) for an overview of recommended workflows.

See also the *howto*[4] documents for some useful examples.

The internals are documented in the *Git API documentation*[5].

Users migrating from CVS may also want to read *gitcvs-migration*(7).

* AUTHORS
Git was started by Linus Torvalds, and is currently maintained by Junio
C Hamano. Numerous contributions have come from the Git mailing list
<*git@vger.kernel.org*[6]>.
*https://openhub.net/p/git/contributors/summary* gives you a more
complete list of contributors.

If you have a clone of git.git itself, the output of *git-shortlog*(1)
and *git-blame*(1) can show you the authors for specific parts of the
project.

* REPORTING BUGS
Report bugs to the Git mailing list <*git@vger.kernel.org*[6]> where the
development and maintenance is primarily done. You do not have to be
subscribed to the list to send a message there. See the list archive at
*https://lore.kernel.org/git* for previous bug reports and other
discussions.

Issues which are security relevant should be disclosed privately to the
Git Security mailing list <*git-security@googlegroups.com*[7]>.

* SEE ALSO
*gittutorial*(7), *gittutorial-2*(7), *giteveryday*(7),
*gitcvs-migration*(7), *gitglossary*(7), *gitcore-tutorial*(7),
*gitcli*(7), *The Git User's Manual*[1], *gitworkflows*(7)

* GIT
Part of the *git*(1) suite

* NOTES
-  1. :: Git User's Manual

  file:///nix/store/9xdnzfl42isjgsn1mnxyjdmspakf8ayi-git-2.46.1-doc/share/doc/git/user-manual.html

-  2. :: Trace2 documentation

  file:///nix/store/9xdnzfl42isjgsn1mnxyjdmspakf8ayi-git-2.46.1-doc/share/doc/git/technical/api-trace2.html

-  3. :: Git concepts chapter of the user-manual

  file:///nix/store/9xdnzfl42isjgsn1mnxyjdmspakf8ayi-git-2.46.1-doc/share/doc/git/user-manual.html#git-concepts

-  4. :: howto

  file:///nix/store/9xdnzfl42isjgsn1mnxyjdmspakf8ayi-git-2.46.1-doc/share/doc/git/howto-index.html

-  5. :: Git API documentation

  file:///nix/store/9xdnzfl42isjgsn1mnxyjdmspakf8ayi-git-2.46.1-doc/share/doc/git/technical/api-index.html

-  6. :: git@vger.kernel.org

  mailto:git@vger.kernel.org

-  7. :: git-security@googlegroups.com

  mailto:git-security@googlegroups.com
