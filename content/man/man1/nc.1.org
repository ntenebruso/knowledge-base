#+TITLE: Manpages - nc.1
The

(or

utility is used for just about anything under the sun involving TCP,
UDP, or

sockets. It can open TCP connections, send UDP packets, listen on
arbitrary TCP and UDP ports, do port scanning, and deal with both IPv4
and IPv6. Unlike

scripts nicely, and separates error messages onto standard error instead
of sending them to standard output, as

does with some.

Common uses include:

simple TCP proxies

shell-script based HTTP clients and servers

network daemon testing

a SOCKS or HTTP ProxyCommand for

and much, much more

The options are as follows:

Use IPv4 addresses only.

Use IPv6 addresses only.

Load the public key part of the TLS peer certificate from

in PEM format. Requires

Use TLS to connect or listen. Cannot be used together with any of the
options

Enable debugging on the socket.

Do not attempt to read from stdin.

Only accept the TLS peer certificate if it contains the

Requires

If not specified,

is used.

Pass the first connected socket using

to stdout and exit. This is useful in conjunction with

to have

perform connection setup with a proxy but then leave the rest of the
connection to another program (e.g.

using the

option). Cannot be used with

or

Only accept the TLS peer certificate if its hash returned from

matches

Requires

and cannot be used with

Print out the

help text and exit.

Specify the size of the TCP receive buffer.

Sleep for

seconds between lines of text sent and received. Also causes a delay
time between connections to multiple ports.

Load the TLS private key from

in PEM format. Requires

When a connection is completed, listen for another one. Requires

When used together with the

option, the server socket is not connected and it can receive UDP
datagrams from multiple hosts.

Listen for an incoming connection rather than initiating a connection to
a remote host. Cannot be used together with any of the options

Additionally, any timeouts specified with the

option are ignored.

Set the TTL / hop limit of outgoing packets.

Ask the kernel to drop incoming packets whose TTL / hop limit is under

the network socket after EOF on the input. Some servers require this to
finish their work.

Do not perform domain name resolution. If a name cannot be resolved
without DNS, an error will be reported.

Specify the size of the TCP send buffer.

During the TLS handshake, load data to be stapled from

which is expected to contain an OCSP response from an OCSP server in DER
format. Requires

and

Specifies a username to present to a proxy server that requires
authentication. If no username is specified then authentication will not
be attempted. Proxy authentication is only supported for HTTP CONNECT
proxies at present.

Specify the source port

should use, subject to privilege restrictions and availability. Cannot
be used together with

Load the root CA bundle for TLS certificate verification from

in PEM format, instead of

Requires

Choose source and/or destination ports randomly instead of sequentially
within a range or in the order that the system assigns them.

Enable the RFC 2385 TCP MD5 signature option.

Set the source address to send packets from, which is useful on machines
with multiple interfaces. For

datagram sockets, specifies the local temporary socket file to create
and use so that datagrams can be received. Cannot be used together with

or

Change the IPv4 TOS/IPv6 traffic class value or the TLS options.

For TLS options,

may be one of:

which disables certificate verification;

which disables certificate name checking;

which requires a client certificate on incoming connections; or

which requires the peer to provide a valid stapled OCSP response with
the handshake. The following TLS options specify a value in the form of
a

pair:

which allows the supported TLS ciphers to be specified (see

for further details);

which allows the supported TLS protocols to be specified (see

for further details). Specifying TLS options requires

For the IPv4 TOS/IPv6 traffic class value,

may be one of

or one of the DiffServ Code Points:

or a number in either hex or decimal.

Send RFC 854 DON'T and WON'T responses to RFC 854 DO and WILL requests.
This makes it possible to use

to script telnet sessions.

Use

sockets. Cannot be used together with any of the options

Use UDP instead of TCP. Cannot be used together with

or

For

sockets, use a datagram socket instead of a stream socket. If a

socket is used, a temporary receiving socket is created in

unless the

flag is given.

Set the routing table to be used.

Produce more verbose output.

Terminate after receiving

packets from the network.

Connections which cannot be established or are idle timeout after

seconds. The

flag has no effect on the

option, i.e.

will listen forever for a connection, with or without the

flag. The default is no timeout.

Use

when talking to the proxy server. Supported protocols are

(SOCKS v.4),

(SOCKS v.5) and

(HTTPS proxy). If the protocol is not specified, SOCKS version 5 is
used.

Connect to

using a proxy at

and

If

is not specified, the well-known port for the proxy protocol is used
(1080 for SOCKS, 3128 for HTTPS). An IPv6 address can be specified
unambiguously by enclosing

in square brackets. A proxy cannot be used with any of the options

Save the peer certificates to

in PEM format. Requires

Only scan for listening daemons, without sending any data to them.
Cannot be used together with

can be a numerical IP address or a symbolic hostname (unless the

option is given). In general, a destination must be specified, unless
the

option is given (in which case the local host is used). For

sockets, a destination is required and is the socket path to connect to
(or listen on if the

option is given).

can be specified as a numeric port number or as a service name. Port
ranges may be specified as numeric port numbers of the form

In general, a destination port must be specified, unless the

option is given. For some options, the value 0 requests that the system
choose a port number.

It is quite simple to build a very basic client/server model using

On one console, start

listening on a specific port for a connection. For example:

is now listening on port 1234 for a connection. On a second console

connect to the machine and port being listened on:

There should now be a connection between the ports. Anything typed at
the second console will be concatenated to the first, and vice-versa.
After the connection has been set up,

does not really care which side is being used as a

and which side is being used as a

The connection may be terminated using an

as the

flag was given.

The example in the previous section can be expanded to build a basic
data transfer model. Any information input into one end of the
connection will be output to the other end, and input and output can be
easily captured in order to emulate file transfer.

Start by using

to listen on a specific port, with output captured into a file:

Using a second machine, connect to the listening

process, feeding it the file which is to be transferred:

After the file has been transferred, the connection will close
automatically.

It is sometimes useful to talk to servers

rather than through a user interface. It can aid in troubleshooting,
when it might be necessary to verify what data a server is sending in
response to commands issued by the client. For example, to retrieve the
home page of a web site:

$ printf "GET / HTTP/1.0\r\n\r\n" | nc host.example.com 80

Note that this also displays the headers sent by the web server. They
can be filtered, using a tool such as

if necessary.

More complicated examples can be built up when the user knows the format
of requests required by the server. As another example, an email may be
submitted to an SMTP server using:

$ nc localhost 25 << EOF HELO host.example.com MAIL
FROM:<user@host.example.com> RCPT TO:<user2@host.example.com> DATA Body
of email. . QUIT EOF

It may be useful to know which ports are open and running services on a
target machine. The

flag can be used to tell

to report open ports, rather than initiate a connection. For example:

$ nc -z host.example.com 20-30 Connection to host.example.com 22 port
[tcp/ssh] succeeded! Connection to host.example.com 25 port [tcp/smtp]
succeeded!

The port range was specified to limit the search to ports 20 - 30.

Alternatively, it might be useful to know which server software is
running, and which versions. This information is often contained within
the greeting banners. In order to retrieve these, it is necessary to
first make a connection, and then break the connection when the banner
has been retrieved. This can be accomplished by specifying a small
timeout with the

flag, or perhaps by issuing a

command to the server:

$ echo "QUIT" | nc host.example.com 20-30 SSH-1.99-OpenSSH_3.6.1p2
Protocol mismatch. 220 host.example.com IMS SMTP Receiver Version 0.84
Ready

Open a TCP connection to port 42 of host.example.com, using port 31337
as the source port, with a timeout of 5 seconds:

Open a TCP connection to port 443 of www.example.com, and negotiate TLS
with any supported TLS protocol version and "compat" ciphers:

Open a TCP connection to port 443 of www.google.ca, and negotiate TLS.
Check for a different name in the certificate for validation:

Open a UDP connection to port 53 of host.example.com:

Open a TCP connection to port 42 of host.example.com using 10.1.2.3 as
the IP for the local end of the connection:

Create and listen on a

stream socket:

Connect to port 42 of host.example.com via an HTTP proxy at 10.2.3.4,
port 8080. This example could also be used by

see the

directive in

for more information.

The same example again, this time enabling proxy authentication with
username

if the proxy requires it:

Original implementation by

\\
Rewritten with IPv6 support by

UDP port scans using the

combination of flags will always report success irrespective of the
target machine's state. However, in conjunction with a traffic sniffer
either on the target machine or an intermediary device, the

combination could be useful for communications diagnostics. Note that
the amount of UDP traffic generated may be limited either due to
hardware resources and/or configuration settings.
