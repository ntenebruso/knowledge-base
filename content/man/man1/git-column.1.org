#+TITLE: Manpages - git-column.1
* NAME
git-column - Display data in columns

* SYNOPSIS
#+begin_example
git column [--command=<name>] [--[raw-]mode=<mode>] [--width=<width>]
             [--indent=<string>] [--nl=<string>] [--padding=<n>]
#+end_example

* DESCRIPTION
This command formats the lines of its standard input into a table with
multiple columns. Each input line occupies one cell of the table. It is
used internally by other git commands to format output into columns.

* OPTIONS
--command=<name>

#+begin_quote
Look up layout mode using configuration variable column.<name> and
column.ui.

#+end_quote

--mode=<mode>

#+begin_quote
Specify layout mode. See configuration variable column.ui for option
syntax in *git-config*(1).

#+end_quote

--raw-mode=<n>

#+begin_quote
Same as --mode but take mode encoded as a number. This is mainly used by
other commands that have already parsed layout mode.

#+end_quote

--width=<width>

#+begin_quote
Specify the terminal width. By default /git column/ will detect the
terminal width, or fall back to 80 if it is unable to do so.

#+end_quote

--indent=<string>

#+begin_quote
String to be printed at the beginning of each line.

#+end_quote

--nl=<string>

#+begin_quote
String to be printed at the end of each line, including newline
character.

#+end_quote

--padding=<N>

#+begin_quote
The number of spaces between columns. One space by default.

#+end_quote

* EXAMPLES
Format data by columns:

#+begin_quote
#+begin_example
$ seq 1 24 | git column --mode=column --padding=5
1      4      7      10     13     16     19     22
2      5      8      11     14     17     20     23
3      6      9      12     15     18     21     24
#+end_example

#+end_quote

Format data by rows:

#+begin_quote
#+begin_example
$ seq 1 21 | git column --mode=row --padding=5
1      2      3      4      5      6      7
8      9      10     11     12     13     14
15     16     17     18     19     20     21
#+end_example

#+end_quote

List some tags in a table with unequal column widths:

#+begin_quote
#+begin_example
$ git tag --list v2.4.* --column=row,dense
v2.4.0  v2.4.0-rc0  v2.4.0-rc1  v2.4.0-rc2  v2.4.0-rc3
v2.4.1  v2.4.10     v2.4.11     v2.4.12     v2.4.2
v2.4.3  v2.4.4      v2.4.5      v2.4.6      v2.4.7
v2.4.8  v2.4.9
#+end_example

#+end_quote

* CONFIGURATION
Everything below this line in this section is selectively included from
the *git-config*(1) documentation. The content is the same as what's
found there:

column.ui

#+begin_quote
Specify whether supported commands should output in columns. This
variable consists of a list of tokens separated by spaces or commas:

These options control when the feature should be enabled (defaults to
/never/):

*always*

#+begin_quote
always show in columns

#+end_quote

*never*

#+begin_quote
never show in columns

#+end_quote

*auto*

#+begin_quote
show in columns if the output is to the terminal

#+end_quote

These options control layout (defaults to /column/). Setting any of
these implies /always/ if none of /always/, /never/, or /auto/ are
specified.

*column*

#+begin_quote
fill columns before rows

#+end_quote

*row*

#+begin_quote
fill rows before columns

#+end_quote

*plain*

#+begin_quote
show in one column

#+end_quote

Finally, these options can be combined with a layout option (defaults to
/nodense/):

*dense*

#+begin_quote
make unequal size columns to utilize more space

#+end_quote

*nodense*

#+begin_quote
make equal size columns

#+end_quote

#+end_quote

column.branch

#+begin_quote
Specify whether to output branch listing in *git branch* in columns. See
*column.ui* for details.

#+end_quote

column.clean

#+begin_quote
Specify the layout when listing items in *git clean -i*, which always
shows files and directories in columns. See *column.ui* for details.

#+end_quote

column.status

#+begin_quote
Specify whether to output untracked files in *git status* in columns.
See *column.ui* for details.

#+end_quote

column.tag

#+begin_quote
Specify whether to output tag listings in *git tag* in columns. See
*column.ui* for details.

#+end_quote

* GIT
Part of the *git*(1) suite
