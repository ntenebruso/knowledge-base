#+TITLE: Manpages - git-sh-setup.1
* NAME
git-sh-setup - Common Git shell script setup code

* SYNOPSIS
#+begin_example
. "$(git --exec-path)/git-sh-setup"
#+end_example

* DESCRIPTION
This is not a command the end user would want to run. Ever. This
documentation is meant for people who are studying the Porcelain-ish
scripts and/or are writing new ones.

The /git sh-setup/ scriptlet is designed to be sourced (using *.*) by
other shell scripts to set up some variables pointing at the normal Git
directories and a few helper shell functions.

Before sourcing it, your script should set up a few variables; *USAGE*
(and *LONG_USAGE*, if any) is used to define the message given by
*usage()* shell function. *SUBDIRECTORY_OK* can be set if the script can
run from a subdirectory of the working tree (some commands do not).

The scriptlet sets *GIT_DIR* and *GIT_OBJECT_DIRECTORY* shell variables,
but does *not* export them to the environment.

* FUNCTIONS
die

#+begin_quote
exit after emitting the supplied error message to the standard error
stream.

#+end_quote

usage

#+begin_quote
die with the usage message.

#+end_quote

set_reflog_action

#+begin_quote
Set *GIT_REFLOG_ACTION* environment to a given string (typically the
name of the program) unless it is already set. Whenever the script runs
a *git* command that updates refs, a reflog entry is created using the
value of this string to leave the record of what command updated the
ref.

#+end_quote

git_editor

#+begin_quote
runs an editor of user's choice (GIT_EDITOR, core.editor, VISUAL or
EDITOR) on a given file, but error out if no editor is specified and the
terminal is dumb.

#+end_quote

is_bare_repository

#+begin_quote
outputs *true* or *false* to the standard output stream to indicate if
the repository is a bare repository (i.e. without an associated working
tree).

#+end_quote

cd_to_toplevel

#+begin_quote
runs chdir to the toplevel of the working tree.

#+end_quote

require_work_tree

#+begin_quote
checks if the current directory is within the working tree of the
repository, and otherwise dies.

#+end_quote

require_work_tree_exists

#+begin_quote
checks if the working tree associated with the repository exists, and
otherwise dies. Often done before calling cd_to_toplevel, which is
impossible to do if there is no working tree.

#+end_quote

require_clean_work_tree <action> [<hint>]

#+begin_quote
checks that the working tree and index associated with the repository
have no uncommitted changes to tracked files. Otherwise it emits an
error message of the form *Cannot <action>: <reason>. <hint>*, and dies.
Example:

#+begin_quote
#+begin_example
require_clean_work_tree rebase "Please commit or stash them."
#+end_example

#+end_quote

#+end_quote

get_author_ident_from_commit

#+begin_quote
outputs code for use with eval to set the GIT_AUTHOR_NAME,
GIT_AUTHOR_EMAIL and GIT_AUTHOR_DATE variables for a given commit.

#+end_quote

create_virtual_base

#+begin_quote
modifies the first file so only lines in common with the second file
remain. If there is insufficient common material, then the first file is
left empty. The result is suitable as a virtual base input for a 3-way
merge.

#+end_quote

* GIT
Part of the *git*(1) suite
