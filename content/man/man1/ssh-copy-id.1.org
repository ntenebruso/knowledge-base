#+TITLE: Manpages - ssh-copy-id.1
Copyright (c) 1999-2023 hands.com Ltd. <http://hands.com/>

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met: 1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer. 2.
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

\\

is a script that uses

to log into a remote machine (presumably using a login password, so
password authentication should be enabled, unless you've done some
clever use of multiple identities). It assembles a list of one or more
fingerprints (as described below) and tries to log in with each key, to
see if any of them are already installed (of course, if you are not
using

this may result in you being repeatedly prompted for pass-phrases). It
then assembles a list of those that failed to log in and, using

enables logins with those keys on the remote server. By default it adds
the keys by appending them to the remote user's

(creating the file, and directory, if necessary). It is also capable of
detecting if the remote system is a NetScreen, and using its

command instead.

The options are as follows:

Use only the key(s) contained in

(rather than looking for identities via

or in the

If the filename does not end in

this is added. If the filename is omitted, the

is used.

Note that this can be used to ensure that the keys copied have the
comment one prefers and/or extra options applied, by ensuring that the
key file has these set as preferred before the copy is attempted.

Forced mode: doesn't check if the keys are present on the remote server.
This means that it does not need the private key. Of course, this can
result in more than one copy of the key being installed on the remote
system.

do a dry-run. Instead of installing keys on the remote system simply
prints the key(s) that would have been installed.

SFTP mode: usually the public keys are installed by executing commands
on the remote side. With this option the user's

file will be downloaded, modified locally and uploaded with sftp. This
option is useful if the server has restrictions on commands which can be
used on the remote side.

the path on the target system where the keys should be added (defaults
to ".ssh/authorized_keys")

These two options are simply passed through untouched, along with their
argument, to allow one to set the port or other

options, respectively.

Rather than specifying these as command line options, it is often better
to use (per-host) settings in

configuration file:

This option is for debugging the

script itself. It sets the shell's -x flag, so that you can see the
commands being run.

Print Usage summary

Default behaviour without

is to check if

provides any output, and if so those keys are used. Note that this
results in the comment on the key being the filename that was given to

when the key was loaded into your

rather than the comment contained in that file, which is a bit of a
shame. Otherwise, if

provides no keys contents of the

will be used.

The

is the most recent file that matches:

(excluding those that match

so if you create a key that is not the one you want

to use, just use

on your preferred key's

file to reinstate it as the most recent.

If you have already installed keys from one system on a lot of remote
hosts, and you then create a new key, on a new client machine, say, it
can be difficult to keep track of which systems on which you've
installed the new key. One way of dealing with this is to load both the
new key and old key(s) into your

Load the new key first, without the

option, then load one or more old keys into the agent, possibly by
ssh-ing to the client machine that has that old key, using the

option to allow agent forwarding:

now, if the new key is installed on the server, you'll be allowed in
unprompted, whereas if you only have the old key(s) enabled, you'll be
asked for confirmation, which is your cue to log back out and run

The reason you might want to specify the

option in this case is to ensure that the comment on the installed key
is the one from the

file, rather than just the filename that was loaded into your agent. It
also ensures that only the id you intended is installed, rather than all
the keys that you have in your

Of course, you can specify another id, or use the contents of the

as you prefer.

Having mentioned

option, you might consider using this whenever using agent forwarding to
avoid your key being hijacked, but it is much better to instead use

and

option, to bounce through remote servers while always doing direct
end-to-end authentication. This way the middle hop(s) don't get access
to your

A web search for

should prove enlightening (NB the modern approach is to use the

option, rather than
