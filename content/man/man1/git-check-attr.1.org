#+TITLE: Manpages - git-check-attr.1
* NAME
git-check-attr - Display gitattributes information

* SYNOPSIS
#+begin_example
git check-attr [--source <tree-ish>] [-a | --all | <attr>...] [--] <pathname>...
git check-attr --stdin [-z] [--source <tree-ish>] [-a | --all | <attr>...]
#+end_example

* DESCRIPTION
For every pathname, this command will list if each attribute is
/unspecified/, /set/, or /unset/ as a gitattribute on that pathname.

* OPTIONS
-a, --all

#+begin_quote
List all attributes that are associated with the specified paths. If
this option is used, then /unspecified/ attributes will not be included
in the output.

#+end_quote

--cached

#+begin_quote
Consider *.gitattributes* in the index only, ignoring the working tree.

#+end_quote

--stdin

#+begin_quote
Read pathnames from the standard input, one per line, instead of from
the command line.

#+end_quote

-z

#+begin_quote
The output format is modified to be machine-parsable. If *--stdin* is
also given, input paths are separated with a NUL character instead of a
linefeed character.

#+end_quote

--source=<tree-ish>

#+begin_quote
Check attributes against the specified tree-ish. It is common to specify
the source tree by naming a commit, branch, or tag associated with it.

#+end_quote

--

#+begin_quote
Interpret all preceding arguments as attributes and all following
arguments as path names.

#+end_quote

If none of *--stdin*, *--all*, or *--* is used, the first argument will
be treated as an attribute and the rest of the arguments as pathnames.

* OUTPUT
The output is of the form: <path> COLON SP <attribute> COLON SP <info>
LF

unless *-z* is in effect, in which case NUL is used as delimiter: <path>
NUL <attribute> NUL <info> NUL

<path> is the path of a file being queried, <attribute> is an attribute
being queried, and <info> can be either:

/unspecified/

#+begin_quote
when the attribute is not defined for the path.

#+end_quote

/unset/

#+begin_quote
when the attribute is defined as false.

#+end_quote

/set/

#+begin_quote
when the attribute is defined as true.

#+end_quote

<value>

#+begin_quote
when a value has been assigned to the attribute.

#+end_quote

Buffering happens as documented under the *GIT_FLUSH* option in
*git*(1). The caller is responsible for avoiding deadlocks caused by
overfilling an input buffer or reading from an empty output buffer.

* EXAMPLES
In the examples, the following /.gitattributes/ file is used:

#+begin_quote
#+begin_example
*.java diff=java -crlf myAttr
NoMyAttr.java !myAttr
README caveat=unspecified
#+end_example

#+end_quote

#+begin_quote
·

Listing a single attribute:

#+end_quote

#+begin_quote
#+begin_example
$ git check-attr diff org/example/MyClass.java
org/example/MyClass.java: diff: java
#+end_example

#+end_quote

#+begin_quote
·

Listing multiple attributes for a file:

#+end_quote

#+begin_quote
#+begin_example
$ git check-attr crlf diff myAttr -- org/example/MyClass.java
org/example/MyClass.java: crlf: unset
org/example/MyClass.java: diff: java
org/example/MyClass.java: myAttr: set
#+end_example

#+end_quote

#+begin_quote
·

Listing all attributes for a file:

#+end_quote

#+begin_quote
#+begin_example
$ git check-attr --all -- org/example/MyClass.java
org/example/MyClass.java: diff: java
org/example/MyClass.java: myAttr: set
#+end_example

#+end_quote

#+begin_quote
·

Listing an attribute for multiple files:

#+end_quote

#+begin_quote
#+begin_example
$ git check-attr myAttr -- org/example/MyClass.java org/example/NoMyAttr.java
org/example/MyClass.java: myAttr: set
org/example/NoMyAttr.java: myAttr: unspecified
#+end_example

#+end_quote

#+begin_quote
·

Not all values are equally unambiguous:

#+end_quote

#+begin_quote
#+begin_example
$ git check-attr caveat README
README: caveat: unspecified
#+end_example

#+end_quote

* SEE ALSO
*gitattributes*(5).

* GIT
Part of the *git*(1) suite
