#+TITLE: Manpages - git-diff-tree.1
* NAME
git-diff-tree - Compares the content and mode of blobs found via two
tree objects

* SYNOPSIS
#+begin_example
git diff-tree [--stdin] [-m] [-s] [-v] [--no-commit-id] [--pretty]
              [-t] [-r] [-c | --cc] [--combined-all-paths] [--root] [--merge-base]
              [<common-diff-options>] <tree-ish> [<tree-ish>] [<path>...]
#+end_example

* DESCRIPTION
Compare the content and mode of blobs found via two tree objects.

If there is only one <tree-ish> given, the commit is compared with its
parents (see --stdin below).

Note that /git diff-tree/ can use the tree encapsulated in a commit
object.

* OPTIONS
-p, -u, --patch

#+begin_quote
Generate patch (see the section called “GENERATING PATCH TEXT WITH -P”).

#+end_quote

-s, --no-patch

#+begin_quote
Suppress all output from the diff machinery. Useful for commands like
*git show* that show the patch by default to squelch their output, or to
cancel the effect of options like *--patch*, *--stat* earlier on the
command line in an alias.

#+end_quote

-U<n>, --unified=<n>

#+begin_quote
Generate diffs with <n> lines of context instead of the usual three.
Implies *--patch*.

#+end_quote

--output=<file>

#+begin_quote
Output to a specific file instead of stdout.

#+end_quote

--output-indicator-new=<char>, --output-indicator-old=<char>,
--output-indicator-context=<char>

#+begin_quote
Specify the character used to indicate new, old or context lines in the
generated patch. Normally they are /+/, /-/ and respectively.

#+end_quote

--raw

#+begin_quote
Generate the diff in raw format. This is the default.

#+end_quote

--patch-with-raw

#+begin_quote
Synonym for *-p --raw*.

#+end_quote

--indent-heuristic

#+begin_quote
Enable the heuristic that shifts diff hunk boundaries to make patches
easier to read. This is the default.

#+end_quote

--no-indent-heuristic

#+begin_quote
Disable the indent heuristic.

#+end_quote

--minimal

#+begin_quote
Spend extra time to make sure the smallest possible diff is produced.

#+end_quote

--patience

#+begin_quote
Generate a diff using the "patience diff" algorithm.

#+end_quote

--histogram

#+begin_quote
Generate a diff using the "histogram diff" algorithm.

#+end_quote

--anchored=<text>

#+begin_quote
Generate a diff using the "anchored diff" algorithm.

This option may be specified more than once.

If a line exists in both the source and destination, exists only once,
and starts with this text, this algorithm attempts to prevent it from
appearing as a deletion or addition in the output. It uses the "patience
diff" algorithm internally.

#+end_quote

--diff-algorithm={patience|minimal|histogram|myers}

#+begin_quote
Choose a diff algorithm. The variants are as follows:

*default*, *myers*

#+begin_quote
The basic greedy diff algorithm. Currently, this is the default.

#+end_quote

*minimal*

#+begin_quote
Spend extra time to make sure the smallest possible diff is produced.

#+end_quote

*patience*

#+begin_quote
Use "patience diff" algorithm when generating patches.

#+end_quote

*histogram*

#+begin_quote
This algorithm extends the patience algorithm to "support low-occurrence
common elements".

#+end_quote

For instance, if you configured the *diff.algorithm* variable to a
non-default value and want to use the default one, then you have to use
*--diff-algorithm=default* option.

#+end_quote

--stat[=<width>[,<name-width>[,<count>]]]

#+begin_quote
Generate a diffstat. By default, as much space as necessary will be used
for the filename part, and the rest for the graph part. Maximum width
defaults to terminal width, or 80 columns if not connected to a
terminal, and can be overridden by *<width>*. The width of the filename
part can be limited by giving another width *<name-width>* after a comma
or by setting *diff.statNameWidth=<width>*. The width of the graph part
can be limited by using *--stat-graph-width=<width>* or by setting
*diff.statGraphWidth=<width>*. Using *--stat* or *--stat-graph-width*
affects all commands generating a stat graph, while setting
*diff.statNameWidth* or *diff.statGraphWidth* does not affect *git
format-patch*. By giving a third parameter *<count>*, you can limit the
output to the first *<count>* lines, followed by *...* if there are
more.

These parameters can also be set individually with
*--stat-width=<width>*, *--stat-name-width=<name-width>* and
*--stat-count=<count>*.

#+end_quote

--compact-summary

#+begin_quote
Output a condensed summary of extended header information such as file
creations or deletions ("new" or "gone", optionally "+l" if it's a
symlink) and mode changes ("+x" or "-x" for adding or removing
executable bit respectively) in diffstat. The information is put between
the filename part and the graph part. Implies *--stat*.

#+end_quote

--numstat

#+begin_quote
Similar to *--stat*, but shows number of added and deleted lines in
decimal notation and pathname without abbreviation, to make it more
machine friendly. For binary files, outputs two *-* instead of saying *0
0*.

#+end_quote

--shortstat

#+begin_quote
Output only the last line of the *--stat* format containing total number
of modified files, as well as number of added and deleted lines.

#+end_quote

-X[<param1,param2,...>], --dirstat[=<param1,param2,...>]

#+begin_quote
Output the distribution of relative amount of changes for each
sub-directory. The behavior of *--dirstat* can be customized by passing
it a comma separated list of parameters. The defaults are controlled by
the *diff.dirstat* configuration variable (see *git-config*(1)). The
following parameters are available:

*changes*

#+begin_quote
Compute the dirstat numbers by counting the lines that have been removed
from the source, or added to the destination. This ignores the amount of
pure code movements within a file. In other words, rearranging lines in
a file is not counted as much as other changes. This is the default
behavior when no parameter is given.

#+end_quote

*lines*

#+begin_quote
Compute the dirstat numbers by doing the regular line-based diff
analysis, and summing the removed/added line counts. (For binary files,
count 64-byte chunks instead, since binary files have no natural concept
of lines). This is a more expensive *--dirstat* behavior than the
*changes* behavior, but it does count rearranged lines within a file as
much as other changes. The resulting output is consistent with what you
get from the other *--*stat* options.

#+end_quote

*files*

#+begin_quote
Compute the dirstat numbers by counting the number of files changed.
Each changed file counts equally in the dirstat analysis. This is the
computationally cheapest *--dirstat* behavior, since it does not have to
look at the file contents at all.

#+end_quote

*cumulative*

#+begin_quote
Count changes in a child directory for the parent directory as well.
Note that when using *cumulative*, the sum of the percentages reported
may exceed 100%. The default (non-cumulative) behavior can be specified
with the *noncumulative* parameter.

#+end_quote

<limit>

#+begin_quote
An integer parameter specifies a cut-off percent (3% by default).
Directories contributing less than this percentage of the changes are
not shown in the output.

#+end_quote

Example: The following will count changed files, while ignoring
directories with less than 10% of the total amount of changed files, and
accumulating child directory counts in the parent directories:
*--dirstat=files,10,cumulative*.

#+end_quote

--cumulative

#+begin_quote
Synonym for --dirstat=cumulative

#+end_quote

--dirstat-by-file[=<param1,param2>...]

#+begin_quote
Synonym for --dirstat=files,<param1>,<param2>...

#+end_quote

--summary

#+begin_quote
Output a condensed summary of extended header information such as
creations, renames and mode changes.

#+end_quote

--patch-with-stat

#+begin_quote
Synonym for *-p --stat*.

#+end_quote

-z

#+begin_quote
When *--raw*, *--numstat*, *--name-only* or *--name-status* has been
given, do not munge pathnames and use NULs as output field terminators.

Without this option, pathnames with "unusual" characters are quoted as
explained for the configuration variable *core.quotePath* (see
*git-config*(1)).

#+end_quote

--name-only

#+begin_quote
Show only the name of each changed file in the post-image tree. The file
names are often encoded in UTF-8. For more information see the
discussion about encoding in the *git-log*(1) manual page.

#+end_quote

--name-status

#+begin_quote
Show only the name(s) and status of each changed file. See the
description of the *--diff-filter* option on what the status letters
mean. Just like *--name-only* the file names are often encoded in UTF-8.

#+end_quote

--submodule[=<format>]

#+begin_quote
Specify how differences in submodules are shown. When specifying
*--submodule=short* the /short/ format is used. This format just shows
the names of the commits at the beginning and end of the range. When
*--submodule* or *--submodule=log* is specified, the /log/ format is
used. This format lists the commits in the range like *git-submodule*(1)
*summary* does. When *--submodule=diff* is specified, the /diff/ format
is used. This format shows an inline diff of the changes in the
submodule contents between the commit range. Defaults to
*diff.submodule* or the /short/ format if the config option is unset.

#+end_quote

--color[=<when>]

#+begin_quote
Show colored diff. *--color* (i.e. without /=<when>/) is the same as
*--color=always*. /<when>/ can be one of *always*, *never*, or *auto*.

#+end_quote

--no-color

#+begin_quote
Turn off colored diff. It is the same as *--color=never*.

#+end_quote

--color-moved[=<mode>]

#+begin_quote
Moved lines of code are colored differently. The <mode> defaults to /no/
if the option is not given and to /zebra/ if the option with no mode is
given. The mode must be one of:

no

#+begin_quote
Moved lines are not highlighted.

#+end_quote

default

#+begin_quote
Is a synonym for *zebra*. This may change to a more sensible mode in the
future.

#+end_quote

plain

#+begin_quote
Any line that is added in one location and was removed in another
location will be colored with /color.diff.newMoved/. Similarly
/color.diff.oldMoved/ will be used for removed lines that are added
somewhere else in the diff. This mode picks up any moved line, but it is
not very useful in a review to determine if a block of code was moved
without permutation.

#+end_quote

blocks

#+begin_quote
Blocks of moved text of at least 20 alphanumeric characters are detected
greedily. The detected blocks are painted using either the
/color.diff.{old,new}Moved/ color. Adjacent blocks cannot be told apart.

#+end_quote

zebra

#+begin_quote
Blocks of moved text are detected as in /blocks/ mode. The blocks are
painted using either the /color.diff.{old,new}Moved/ color or
/color.diff.{old,new}MovedAlternative/. The change between the two
colors indicates that a new block was detected.

#+end_quote

dimmed-zebra

#+begin_quote
Similar to /zebra/, but additional dimming of uninteresting parts of
moved code is performed. The bordering lines of two adjacent blocks are
considered interesting, the rest is uninteresting. *dimmed_zebra* is a
deprecated synonym.

#+end_quote

#+end_quote

--no-color-moved

#+begin_quote
Turn off move detection. This can be used to override configuration
settings. It is the same as *--color-moved=no*.

#+end_quote

--color-moved-ws=<modes>

#+begin_quote
This configures how whitespace is ignored when performing the move
detection for *--color-moved*. These modes can be given as a comma
separated list:

no

#+begin_quote
Do not ignore whitespace when performing move detection.

#+end_quote

ignore-space-at-eol

#+begin_quote
Ignore changes in whitespace at EOL.

#+end_quote

ignore-space-change

#+begin_quote
Ignore changes in amount of whitespace. This ignores whitespace at line
end, and considers all other sequences of one or more whitespace
characters to be equivalent.

#+end_quote

ignore-all-space

#+begin_quote
Ignore whitespace when comparing lines. This ignores differences even if
one line has whitespace where the other line has none.

#+end_quote

allow-indentation-change

#+begin_quote
Initially ignore any whitespace in the move detection, then group the
moved code blocks only into a block if the change in whitespace is the
same per line. This is incompatible with the other modes.

#+end_quote

#+end_quote

--no-color-moved-ws

#+begin_quote
Do not ignore whitespace when performing move detection. This can be
used to override configuration settings. It is the same as
*--color-moved-ws=no*.

#+end_quote

--word-diff[=<mode>]

#+begin_quote
Show a word diff, using the <mode> to delimit changed words. By default,
words are delimited by whitespace; see *--word-diff-regex* below. The
<mode> defaults to /plain/, and must be one of:

color

#+begin_quote
Highlight changed words using only colors. Implies *--color*.

#+end_quote

plain

#+begin_quote
Show words as *[-removed-]* and *{+added+}*. Makes no attempts to escape
the delimiters if they appear in the input, so the output may be
ambiguous.

#+end_quote

porcelain

#+begin_quote
Use a special line-based format intended for script consumption.
Added/removed/unchanged runs are printed in the usual unified diff
format, starting with a *+*/*-*/` ` character at the beginning of the
line and extending to the end of the line. Newlines in the input are
represented by a tilde *~* on a line of its own.

#+end_quote

none

#+begin_quote
Disable word diff again.

#+end_quote

Note that despite the name of the first mode, color is used to highlight
the changed parts in all modes if enabled.

#+end_quote

--word-diff-regex=<regex>

#+begin_quote
Use <regex> to decide what a word is, instead of considering runs of
non-whitespace to be a word. Also implies *--word-diff* unless it was
already enabled.

Every non-overlapping match of the <regex> is considered a word.
Anything between these matches is considered whitespace and ignored(!)
for the purposes of finding differences. You may want to append
*|[^[:space:]]* to your regular expression to make sure that it matches
all non-whitespace characters. A match that contains a newline is
silently truncated(!) at the newline.

For example, *--word-diff-regex=.* will treat each character as a word
and, correspondingly, show differences character by character.

The regex can also be set via a diff driver or configuration option, see
*gitattributes*(5) or *git-config*(1). Giving it explicitly overrides
any diff driver or configuration setting. Diff drivers override
configuration settings.

#+end_quote

--color-words[=<regex>]

#+begin_quote
Equivalent to *--word-diff=color* plus (if a regex was specified)
*--word-diff-regex=<regex>*.

#+end_quote

--no-renames

#+begin_quote
Turn off rename detection, even when the configuration file gives the
default to do so.

#+end_quote

--[no-]rename-empty

#+begin_quote
Whether to use empty blobs as rename source.

#+end_quote

--check

#+begin_quote
Warn if changes introduce conflict markers or whitespace errors. What
are considered whitespace errors is controlled by *core.whitespace*
configuration. By default, trailing whitespaces (including lines that
consist solely of whitespaces) and a space character that is immediately
followed by a tab character inside the initial indent of the line are
considered whitespace errors. Exits with non-zero status if problems are
found. Not compatible with --exit-code.

#+end_quote

--ws-error-highlight=<kind>

#+begin_quote
Highlight whitespace errors in the *context*, *old* or *new* lines of
the diff. Multiple values are separated by comma, *none* resets previous
values, *default* reset the list to *new* and *all* is a shorthand for
*old,new,context*. When this option is not given, and the configuration
variable *diff.wsErrorHighlight* is not set, only whitespace errors in
*new* lines are highlighted. The whitespace errors are colored with
*color.diff.whitespace*.

#+end_quote

--full-index

#+begin_quote
Instead of the first handful of characters, show the full pre- and
post-image blob object names on the "index" line when generating patch
format output.

#+end_quote

--binary

#+begin_quote
In addition to *--full-index*, output a binary diff that can be applied
with *git-apply*. Implies *--patch*.

#+end_quote

--abbrev[=<n>]

#+begin_quote
Instead of showing the full 40-byte hexadecimal object name in diff-raw
format output and diff-tree header lines, show the shortest prefix that
is at least /<n>/ hexdigits long that uniquely refers the object. In
diff-patch output format, *--full-index* takes higher precedence, i.e.
if *--full-index* is specified, full blob names will be shown regardless
of *--abbrev*. Non default number of digits can be specified with
*--abbrev=<n>*.

#+end_quote

-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]

#+begin_quote
Break complete rewrite changes into pairs of delete and create. This
serves two purposes:

It affects the way a change that amounts to a total rewrite of a file
not as a series of deletion and insertion mixed together with a very few
lines that happen to match textually as the context, but as a single
deletion of everything old followed by a single insertion of everything
new, and the number *m* controls this aspect of the -B option (defaults
to 60%). *-B/70%* specifies that less than 30% of the original should
remain in the result for Git to consider it a total rewrite (i.e.
otherwise the resulting patch will be a series of deletion and insertion
mixed together with context lines).

When used with -M, a totally-rewritten file is also considered as the
source of a rename (usually -M only considers a file that disappeared as
the source of a rename), and the number *n* controls this aspect of the
-B option (defaults to 50%). *-B20%* specifies that a change with
addition and deletion compared to 20% or more of the file's size are
eligible for being picked up as a possible source of a rename to another
file.

#+end_quote

-M[<n>], --find-renames[=<n>]

#+begin_quote
Detect renames. If *n* is specified, it is a threshold on the similarity
index (i.e. amount of addition/deletions compared to the file's size).
For example, *-M90%* means Git should consider a delete/add pair to be a
rename if more than 90% of the file hasn't changed. Without a *%* sign,
the number is to be read as a fraction, with a decimal point before it.
I.e., *-M5* becomes 0.5, and is thus the same as *-M50%*. Similarly,
*-M05* is the same as *-M5%*. To limit detection to exact renames, use
*-M100%*. The default similarity index is 50%.

#+end_quote

-C[<n>], --find-copies[=<n>]

#+begin_quote
Detect copies as well as renames. See also *--find-copies-harder*. If
*n* is specified, it has the same meaning as for *-M<n>*.

#+end_quote

--find-copies-harder

#+begin_quote
For performance reasons, by default, *-C* option finds copies only if
the original file of the copy was modified in the same changeset. This
flag makes the command inspect unmodified files as candidates for the
source of copy. This is a very expensive operation for large projects,
so use it with caution. Giving more than one *-C* option has the same
effect.

#+end_quote

-D, --irreversible-delete

#+begin_quote
Omit the preimage for deletes, i.e. print only the header but not the
diff between the preimage and */dev/null*. The resulting patch is not
meant to be applied with *patch* or *git apply*; this is solely for
people who want to just concentrate on reviewing the text after the
change. In addition, the output obviously lacks enough information to
apply such a patch in reverse, even manually, hence the name of the
option.

When used together with *-B*, omit also the preimage in the deletion
part of a delete/create pair.

#+end_quote

-l<num>

#+begin_quote
The *-M* and *-C* options involve some preliminary steps that can detect
subsets of renames/copies cheaply, followed by an exhaustive fallback
portion that compares all remaining unpaired destinations to all
relevant sources. (For renames, only remaining unpaired sources are
relevant; for copies, all original sources are relevant.) For N sources
and destinations, this exhaustive check is O(N^2). This option prevents
the exhaustive portion of rename/copy detection from running if the
number of source/destination files involved exceeds the specified
number. Defaults to diff.renameLimit. Note that a value of 0 is treated
as unlimited.

#+end_quote

--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]

#+begin_quote
Select only files that are Added (*A*), Copied (*C*), Deleted (*D*),
Modified (*M*), Renamed (*R*), have their type (i.e. regular file,
symlink, submodule, ...) changed (*T*), are Unmerged (*U*), are Unknown
(*X*), or have had their pairing Broken (*B*). Any combination of the
filter characters (including none) can be used. When *** (All-or-none)
is added to the combination, all paths are selected if there is any file
that matches other criteria in the comparison; if there is no file that
matches other criteria, nothing is selected.

Also, these upper-case letters can be downcased to exclude. E.g.
*--diff-filter=ad* excludes added and deleted paths.

Note that not all diffs can feature all types. For instance, copied and
renamed entries cannot appear if detection for those types is disabled.

#+end_quote

-S<string>

#+begin_quote
Look for differences that change the number of occurrences of the
specified string (i.e. addition/deletion) in a file. Intended for the
scripter's use.

It is useful when you're looking for an exact block of code (like a
struct), and want to know the history of that block since it first came
into being: use the feature iteratively to feed the interesting block in
the preimage back into *-S*, and keep going until you get the very first
version of the block.

Binary files are searched as well.

#+end_quote

-G<regex>

#+begin_quote
Look for differences whose patch text contains added/removed lines that
match <regex>.

To illustrate the difference between *-S<regex> --pickaxe-regex* and
*-G<regex>*, consider a commit with the following diff in the same file:

#+begin_quote
#+begin_example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
#+end_example

#+end_quote

While *git log -G"frotz\(nitfol"* will show this commit, *git log
-S"frotz\(nitfol" --pickaxe-regex* will not (because the number of
occurrences of that string did not change).

Unless *--text* is supplied patches of binary files without a textconv
filter will be ignored.

See the /pickaxe/ entry in *gitdiffcore*(7) for more information.

#+end_quote

--find-object=<object-id>

#+begin_quote
Look for differences that change the number of occurrences of the
specified object. Similar to *-S*, just the argument is different in
that it doesn't search for a specific string but for a specific object
id.

The object can be a blob or a submodule commit. It implies the *-t*
option in *git-log* to also find trees.

#+end_quote

--pickaxe-all

#+begin_quote
When *-S* or *-G* finds a change, show all the changes in that
changeset, not just the files that contain the change in <string>.

#+end_quote

--pickaxe-regex

#+begin_quote
Treat the <string> given to *-S* as an extended POSIX regular expression
to match.

#+end_quote

-O<orderfile>

#+begin_quote
Control the order in which files appear in the output. This overrides
the *diff.orderFile* configuration variable (see *git-config*(1)). To
cancel *diff.orderFile*, use *-O/dev/null*.

The output order is determined by the order of glob patterns in
<orderfile>. All files with pathnames that match the first pattern are
output first, all files with pathnames that match the second pattern
(but not the first) are output next, and so on. All files with pathnames
that do not match any pattern are output last, as if there was an
implicit match-all pattern at the end of the file. If multiple pathnames
have the same rank (they match the same pattern but no earlier
patterns), their output order relative to each other is the normal
order.

<orderfile> is parsed as follows:

#+begin_quote
·

Blank lines are ignored, so they can be used as separators for
readability.

#+end_quote

#+begin_quote
·

Lines starting with a hash ("*#*") are ignored, so they can be used for
comments. Add a backslash ("*\*") to the beginning of the pattern if it
starts with a hash.

#+end_quote

#+begin_quote
·

Each other line contains a single pattern.

#+end_quote

Patterns have the same syntax and semantics as patterns used for
fnmatch(3) without the FNM_PATHNAME flag, except a pathname also matches
a pattern if removing any number of the final pathname components
matches the pattern. For example, the pattern "*foo*bar*" matches
"*fooasdfbar*" and "*foo/bar/baz/asdf*" but not "*foobarx*".

#+end_quote

--skip-to=<file>, --rotate-to=<file>

#+begin_quote
Discard the files before the named <file> from the output (i.e. /skip
to/), or move them to the end of the output (i.e. /rotate to/). These
options were invented primarily for the use of the *git difftool*
command, and may not be very useful otherwise.

#+end_quote

-R

#+begin_quote
Swap two inputs; that is, show differences from index or on-disk file to
tree contents.

#+end_quote

--relative[=<path>], --no-relative

#+begin_quote
When run from a subdirectory of the project, it can be told to exclude
changes outside the directory and show pathnames relative to it with
this option. When you are not in a subdirectory (e.g. in a bare
repository), you can name which subdirectory to make the output relative
to by giving a <path> as an argument. *--no-relative* can be used to
countermand both *diff.relative* config option and previous
*--relative*.

#+end_quote

-a, --text

#+begin_quote
Treat all files as text.

#+end_quote

--ignore-cr-at-eol

#+begin_quote
Ignore carriage-return at the end of line when doing a comparison.

#+end_quote

--ignore-space-at-eol

#+begin_quote
Ignore changes in whitespace at EOL.

#+end_quote

-b, --ignore-space-change

#+begin_quote
Ignore changes in amount of whitespace. This ignores whitespace at line
end, and considers all other sequences of one or more whitespace
characters to be equivalent.

#+end_quote

-w, --ignore-all-space

#+begin_quote
Ignore whitespace when comparing lines. This ignores differences even if
one line has whitespace where the other line has none.

#+end_quote

--ignore-blank-lines

#+begin_quote
Ignore changes whose lines are all blank.

#+end_quote

-I<regex>, --ignore-matching-lines=<regex>

#+begin_quote
Ignore changes whose all lines match <regex>. This option may be
specified more than once.

#+end_quote

--inter-hunk-context=<lines>

#+begin_quote
Show the context between diff hunks, up to the specified number of
lines, thereby fusing hunks that are close to each other. Defaults to
*diff.interHunkContext* or 0 if the config option is unset.

#+end_quote

-W, --function-context

#+begin_quote
Show whole function as context lines for each change. The function names
are determined in the same way as *git diff* works out patch hunk
headers (see /Defining a custom hunk-header/ in *gitattributes*(5)).

#+end_quote

--exit-code

#+begin_quote
Make the program exit with codes similar to diff(1). That is, it exits
with 1 if there were differences and 0 means no differences.

#+end_quote

--quiet

#+begin_quote
Disable all output of the program. Implies *--exit-code*. Disables
execution of external diff helpers whose exit code is not trusted, i.e.
their respective configuration option *diff.trustExitCode* or
*diff.<driver>.trustExitCode* or environment variable
*GIT_EXTERNAL_DIFF_TRUST_EXIT_CODE* is false.

#+end_quote

--ext-diff

#+begin_quote
Allow an external diff helper to be executed. If you set an external
diff driver with *gitattributes*(5), you need to use this option with
*git-log*(1) and friends.

#+end_quote

--no-ext-diff

#+begin_quote
Disallow external diff drivers.

#+end_quote

--textconv, --no-textconv

#+begin_quote
Allow (or disallow) external text conversion filters to be run when
comparing binary files. See *gitattributes*(5) for details. Because
textconv filters are typically a one-way conversion, the resulting diff
is suitable for human consumption, but cannot be applied. For this
reason, textconv filters are enabled by default only for *git-diff*(1)
and *git-log*(1), but not for *git-format-patch*(1) or diff plumbing
commands.

#+end_quote

--ignore-submodules[=<when>]

#+begin_quote
Ignore changes to submodules in the diff generation. <when> can be
either "none", "untracked", "dirty" or "all", which is the default.
Using "none" will consider the submodule modified when it either
contains untracked or modified files or its HEAD differs from the commit
recorded in the superproject and can be used to override any settings of
the /ignore/ option in *git-config*(1) or *gitmodules*(5). When
"untracked" is used submodules are not considered dirty when they only
contain untracked content (but they are still scanned for modified
content). Using "dirty" ignores all changes to the work tree of
submodules, only changes to the commits stored in the superproject are
shown (this was the behavior until 1.7.0). Using "all" hides all changes
to submodules.

#+end_quote

--src-prefix=<prefix>

#+begin_quote
Show the given source prefix instead of "a/".

#+end_quote

--dst-prefix=<prefix>

#+begin_quote
Show the given destination prefix instead of "b/".

#+end_quote

--no-prefix

#+begin_quote
Do not show any source or destination prefix.

#+end_quote

--default-prefix

#+begin_quote
Use the default source and destination prefixes ("a/" and "b/"). This
overrides configuration variables such as *diff.noprefix*,
*diff.srcPrefix*, *diff.dstPrefix*, and *diff.mnemonicPrefix* (see
*git-config*(1)).

#+end_quote

--line-prefix=<prefix>

#+begin_quote
Prepend an additional prefix to every line of output.

#+end_quote

--ita-invisible-in-index

#+begin_quote
By default entries added by "git add -N" appear as an existing empty
file in "git diff" and a new file in "git diff --cached". This option
makes the entry appear as a new file in "git diff" and non-existent in
"git diff --cached". This option could be reverted with
*--ita-visible-in-index*. Both options are experimental and could be
removed in future.

#+end_quote

For more detailed explanation on these common options, see also
*gitdiffcore*(7).

<tree-ish>

#+begin_quote
The id of a tree object.

#+end_quote

<path>...

#+begin_quote
If provided, the results are limited to a subset of files matching one
of the provided pathspecs.

#+end_quote

-r

#+begin_quote
Recurse into sub-trees.

#+end_quote

-t

#+begin_quote
Show tree entry itself as well as subtrees. Implies -r.

#+end_quote

--root

#+begin_quote
When *--root* is specified the initial commit will be shown as a big
creation event. This is equivalent to a diff against the NULL tree.

#+end_quote

--merge-base

#+begin_quote
Instead of comparing the <tree-ish>s directly, use the merge base
between the two <tree-ish>s as the "before" side. There must be two
<tree-ish>s given and they must both be commits.

#+end_quote

--stdin

#+begin_quote
When *--stdin* is specified, the command does not take <tree-ish>
arguments from the command line. Instead, it reads lines containing
either two <tree>, one <commit>, or a list of <commit> from its standard
input. (Use a single space as separator.)

When two trees are given, it compares the first tree with the second.
When a single commit is given, it compares the commit with its parents.
The remaining commits, when given, are used as if they are parents of
the first commit.

When comparing two trees, the ID of both trees (separated by a space and
terminated by a newline) is printed before the difference. When
comparing commits, the ID of the first (or only) commit, followed by a
newline, is printed.

The following flags further affect the behavior when comparing commits
(but not trees).

#+end_quote

-m

#+begin_quote
By default, /git diff-tree --stdin/ does not show differences for merge
commits. With this flag, it shows differences to that commit from all of
its parents. See also *-c*.

#+end_quote

-s

#+begin_quote
By default, /git diff-tree --stdin/ shows differences, either in
machine-readable form (without *-p*) or in patch form (with *-p*). This
output can be suppressed. It is only useful with the *-v* flag.

#+end_quote

-v

#+begin_quote
This flag causes /git diff-tree --stdin/ to also show the commit message
before the differences.

#+end_quote

--pretty[=<format>], --format=<format>

#+begin_quote
Pretty-print the contents of the commit logs in a given format, where
/<format>/ can be one of /oneline/, /short/, /medium/, /full/, /fuller/,
/reference/, /email/, /raw/, /format:<string>/ and /tformat:<string>/.
When /<format>/ is none of the above, and has /%placeholder/ in it, it
acts as if /--pretty=tformat:<format>/ were given.

See the "PRETTY FORMATS" section for some additional details for each
format. When /=<format>/ part is omitted, it defaults to /medium/.

Note: you can specify the default pretty format in the repository
configuration (see *git-config*(1)).

#+end_quote

--abbrev-commit

#+begin_quote
Instead of showing the full 40-byte hexadecimal commit object name, show
a prefix that names the object uniquely. "--abbrev=<n>" (which also
modifies diff output, if it is displayed) option can be used to specify
the minimum length of the prefix.

This should make "--pretty=oneline" a whole lot more readable for people
using 80-column terminals.

#+end_quote

--no-abbrev-commit

#+begin_quote
Show the full 40-byte hexadecimal commit object name. This negates
*--abbrev-commit*, either explicit or implied by other options such as
"--oneline". It also overrides the *log.abbrevCommit* variable.

#+end_quote

--oneline

#+begin_quote
This is a shorthand for "--pretty=oneline --abbrev-commit" used
together.

#+end_quote

--encoding=<encoding>

#+begin_quote
Commit objects record the character encoding used for the log message in
their encoding header; this option can be used to tell the command to
re-code the commit log message in the encoding preferred by the user.
For non plumbing commands this defaults to UTF-8. Note that if an object
claims to be encoded in *X* and we are outputting in *X*, we will output
the object verbatim; this means that invalid sequences in the original
commit may be copied to the output. Likewise, if iconv(3) fails to
convert the commit, we will quietly output the original object verbatim.

#+end_quote

--expand-tabs=<n>, --expand-tabs, --no-expand-tabs

#+begin_quote
Perform a tab expansion (replace each tab with enough spaces to fill to
the next display column that is a multiple of /<n>/) in the log message
before showing it in the output. *--expand-tabs* is a short-hand for
*--expand-tabs=8*, and *--no-expand-tabs* is a short-hand for
*--expand-tabs=0*, which disables tab expansion.

By default, tabs are expanded in pretty formats that indent the log
message by 4 spaces (i.e. /medium/, which is the default, /full/, and
/fuller/).

#+end_quote

--notes[=<ref>]

#+begin_quote
Show the notes (see *git-notes*(1)) that annotate the commit, when
showing the commit log message. This is the default for *git log*, *git
show* and *git whatchanged* commands when there is no *--pretty*,
*--format*, or *--oneline* option given on the command line.

By default, the notes shown are from the notes refs listed in the
*core.notesRef* and *notes.displayRef* variables (or corresponding
environment overrides). See *git-config*(1) for more details.

With an optional /<ref>/ argument, use the ref to find the notes to
display. The ref can specify the full refname when it begins with
*refs/notes/*; when it begins with *notes/*, *refs/* and otherwise
*refs/notes/* is prefixed to form the full name of the ref.

Multiple --notes options can be combined to control which notes are
being displayed. Examples: "--notes=foo" will show only notes from
"refs/notes/foo"; "--notes=foo --notes" will show both notes from
"refs/notes/foo" and from the default notes ref(s).

#+end_quote

--no-notes

#+begin_quote
Do not show notes. This negates the above *--notes* option, by resetting
the list of notes refs from which notes are shown. Options are parsed in
the order given on the command line, so e.g. "--notes --notes=foo
--no-notes --notes=bar" will only show notes from "refs/notes/bar".

#+end_quote

--show-notes-by-default

#+begin_quote
Show the default notes unless options for displaying specific notes are
given.

#+end_quote

--show-notes[=<ref>], --[no-]standard-notes

#+begin_quote
These options are deprecated. Use the above --notes/--no-notes options
instead.

#+end_quote

--show-signature

#+begin_quote
Check the validity of a signed commit object by passing the signature to
*gpg --verify* and show the output.

#+end_quote

--no-commit-id

#+begin_quote
/git diff-tree/ outputs a line with the commit ID when applicable. This
flag suppresses the commit ID output.

#+end_quote

-c

#+begin_quote
This flag changes the way a merge commit is displayed (which means it is
useful only when the command is given one <tree-ish>, or *--stdin*). It
shows the differences from each of the parents to the merge result
simultaneously instead of showing pairwise diff between a parent and the
result one at a time (which is what the *-m* option does). Furthermore,
it lists only files which were modified from all parents.

#+end_quote

--cc

#+begin_quote
This flag changes the way a merge commit patch is displayed, in a
similar way to the *-c* option. It implies the *-c* and *-p* options and
further compresses the patch output by omitting uninteresting hunks
whose contents in the parents have only two variants and the merge
result picks one of them without modification. When all hunks are
uninteresting, the commit itself and the commit log message are not
shown, just like in any other "empty diff" case.

#+end_quote

--combined-all-paths

#+begin_quote
This flag causes combined diffs (used for merge commits) to list the
name of the file from all parents. It thus only has effect when -c or
--cc are specified, and is likely only useful if filename changes are
detected (i.e. when either rename or copy detection have been
requested).

#+end_quote

--always

#+begin_quote
Show the commit itself and the commit log message even if the diff
itself is empty.

#+end_quote

* PRETTY FORMATS
If the commit is a merge, and if the pretty-format is not /oneline/,
/email/ or /raw/, an additional line is inserted before the /Author:/
line. This line begins with "Merge: " and the hashes of ancestral
commits are printed, separated by spaces. Note that the listed commits
may not necessarily be the list of the *direct* parent commits if you
have limited your view of history: for example, if you are only
interested in changes related to a certain directory or file.

There are several built-in formats, and you can define additional
formats by setting a pretty.<name> config option to either another
format name, or a /format:/ string, as described below (see
*git-config*(1)). Here are the details of the built-in formats:

#+begin_quote
·

/oneline/

#+begin_quote
#+begin_example
<hash> <title-line>
#+end_example

#+end_quote

This is designed to be as compact as possible.

#+end_quote

#+begin_quote
·

/short/

#+begin_quote
#+begin_example
commit <hash>
Author: <author>
#+end_example

#+end_quote

#+begin_quote
#+begin_example
<title-line>
#+end_example

#+end_quote

#+end_quote

#+begin_quote
·

/medium/

#+begin_quote
#+begin_example
commit <hash>
Author: <author>
Date:   <author-date>
#+end_example

#+end_quote

#+begin_quote
#+begin_example
<title-line>
#+end_example

#+end_quote

#+begin_quote
#+begin_example
<full-commit-message>
#+end_example

#+end_quote

#+end_quote

#+begin_quote
·

/full/

#+begin_quote
#+begin_example
commit <hash>
Author: <author>
Commit: <committer>
#+end_example

#+end_quote

#+begin_quote
#+begin_example
<title-line>
#+end_example

#+end_quote

#+begin_quote
#+begin_example
<full-commit-message>
#+end_example

#+end_quote

#+end_quote

#+begin_quote
·

/fuller/

#+begin_quote
#+begin_example
commit <hash>
Author:     <author>
AuthorDate: <author-date>
Commit:     <committer>
CommitDate: <committer-date>
#+end_example

#+end_quote

#+begin_quote
#+begin_example
<title-line>
#+end_example

#+end_quote

#+begin_quote
#+begin_example
<full-commit-message>
#+end_example

#+end_quote

#+end_quote

#+begin_quote
·

/reference/

#+begin_quote
#+begin_example
<abbrev-hash> (<title-line>, <short-author-date>)
#+end_example

#+end_quote

This format is used to refer to another commit in a commit message and
is the same as *--pretty=format:%C(auto)%h (%s, %ad)*. By default, the
date is formatted with *--date=short* unless another *--date* option is
explicitly specified. As with any *format:* with format placeholders,
its output is not affected by other options like *--decorate* and
*--walk-reflogs*.

#+end_quote

#+begin_quote
·

/email/

#+begin_quote
#+begin_example
From <hash> <date>
From: <author>
Date: <author-date>
Subject: [PATCH] <title-line>
#+end_example

#+end_quote

#+begin_quote
#+begin_example
<full-commit-message>
#+end_example

#+end_quote

#+end_quote

#+begin_quote
·

/mboxrd/

Like /email/, but lines in the commit message starting with "From "
(preceded by zero or more ">") are quoted with ">" so they aren't
confused as starting a new commit.

#+end_quote

#+begin_quote
·

/raw/

The /raw/ format shows the entire commit exactly as stored in the commit
object. Notably, the hashes are displayed in full, regardless of whether
--abbrev or --no-abbrev are used, and /parents/ information show the
true parent commits, without taking grafts or history simplification
into account. Note that this format affects the way commits are
displayed, but not the way the diff is shown e.g. with *git log --raw*.
To get full object names in a raw diff format, use *--no-abbrev*.

#+end_quote

#+begin_quote
·

/format:<format-string>/

The /format:<format-string>/ format allows you to specify which
information you want to show. It works a little bit like printf format,
with the notable exception that you get a newline with /%n/ instead of
/\n/.

E.g, /format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"/
would show something like this:

#+begin_quote
#+begin_example
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<
#+end_example

#+end_quote

The placeholders are:

#+begin_quote
·

Placeholders that expand to a single literal character:

/%n/

#+begin_quote
newline

#+end_quote

/%%/

#+begin_quote
a raw /%/

#+end_quote

/%x00/

#+begin_quote
/%x/ followed by two hexadecimal digits is replaced with a byte with the
hexadecimal digits value (we will call this "literal formatting code" in
the rest of this document).

#+end_quote

#+end_quote

#+begin_quote
·

Placeholders that affect formatting of later placeholders:

/%Cred/

#+begin_quote
switch color to red

#+end_quote

/%Cgreen/

#+begin_quote
switch color to green

#+end_quote

/%Cblue/

#+begin_quote
switch color to blue

#+end_quote

/%Creset/

#+begin_quote
reset color

#+end_quote

/%C(...)/

#+begin_quote
color specification, as described under Values in the "CONFIGURATION
FILE" section of *git-config*(1). By default, colors are shown only when
enabled for log output (by *color.diff*, *color.ui*, or *--color*, and
respecting the *auto* settings of the former if we are going to a
terminal). *%C(auto,...)* is accepted as a historical synonym for the
default (e.g., *%C(auto,red)*). Specifying *%C(always,...)* will show
the colors even when color is not otherwise enabled (though consider
just using *--color=always* to enable color for the whole output,
including this format and anything else git might color). *auto* alone
(i.e. *%C(auto)*) will turn on auto coloring on the next placeholders
until the color is switched again.

#+end_quote

/%m/

#+begin_quote
left (*<*), right (*>*) or boundary (*-*) mark

#+end_quote

/%w([<w>[,<i1>[,<i2>]]])/

#+begin_quote
switch line wrapping, like the -w option of *git-shortlog*(1).

#+end_quote

/%<( <N> [,trunc|ltrunc|mtrunc])/

#+begin_quote
make the next placeholder take at least N column widths, padding spaces
on the right if necessary. Optionally truncate (with ellipsis /../) at
the left (ltrunc) *..ft*, the middle (mtrunc) *mi..le*, or the end
(trunc) *rig..*, if the output is longer than N columns. Note 1: that
truncating only works correctly with N >= 2. Note 2: spaces around the N
and M (see below) values are optional. Note 3: Emojis and other wide
characters will take two display columns, which may over-run column
boundaries. Note 4: decomposed character combining marks may be
misplaced at padding boundaries.

#+end_quote

/%<|( <M> )/

#+begin_quote
make the next placeholder take at least until Mth display column,
padding spaces on the right if necessary. Use negative M values for
column positions measured from the right hand edge of the terminal
window.

#+end_quote

/%>( <N> )/, /%>|( <M> )/

#+begin_quote
similar to /%<( <N> )/, /%<|( <M> )/ respectively, but padding spaces on
the left

#+end_quote

/%>>( <N> )/, /%>>|( <M> )/

#+begin_quote
similar to /%>( <N> )/, /%>|( <M> )/ respectively, except that if the
next placeholder takes more spaces than given and there are spaces on
its left, use those spaces

#+end_quote

/%><( <N> )/, /%><|( <M> )/

#+begin_quote
similar to /%<( <N> )/, /%<|( <M> )/ respectively, but padding both
sides (i.e. the text is centered)

#+end_quote

#+end_quote

#+begin_quote
·

Placeholders that expand to information extracted from the commit:

/%H/

#+begin_quote
commit hash

#+end_quote

/%h/

#+begin_quote
abbreviated commit hash

#+end_quote

/%T/

#+begin_quote
tree hash

#+end_quote

/%t/

#+begin_quote
abbreviated tree hash

#+end_quote

/%P/

#+begin_quote
parent hashes

#+end_quote

/%p/

#+begin_quote
abbreviated parent hashes

#+end_quote

/%an/

#+begin_quote
author name

#+end_quote

/%aN/

#+begin_quote
author name (respecting .mailmap, see *git-shortlog*(1) or
*git-blame*(1))

#+end_quote

/%ae/

#+begin_quote
author email

#+end_quote

/%aE/

#+begin_quote
author email (respecting .mailmap, see *git-shortlog*(1) or
*git-blame*(1))

#+end_quote

/%al/

#+begin_quote
author email local-part (the part before the /@/ sign)

#+end_quote

/%aL/

#+begin_quote
author local-part (see /%al/) respecting .mailmap, see *git-shortlog*(1)
or *git-blame*(1))

#+end_quote

/%ad/

#+begin_quote
author date (format respects --date= option)

#+end_quote

/%aD/

#+begin_quote
author date, RFC2822 style

#+end_quote

/%ar/

#+begin_quote
author date, relative

#+end_quote

/%at/

#+begin_quote
author date, UNIX timestamp

#+end_quote

/%ai/

#+begin_quote
author date, ISO 8601-like format

#+end_quote

/%aI/

#+begin_quote
author date, strict ISO 8601 format

#+end_quote

/%as/

#+begin_quote
author date, short format (*YYYY-MM-DD*)

#+end_quote

/%ah/

#+begin_quote
author date, human style (like the *--date=human* option of
*git-rev-list*(1))

#+end_quote

/%cn/

#+begin_quote
committer name

#+end_quote

/%cN/

#+begin_quote
committer name (respecting .mailmap, see *git-shortlog*(1) or
*git-blame*(1))

#+end_quote

/%ce/

#+begin_quote
committer email

#+end_quote

/%cE/

#+begin_quote
committer email (respecting .mailmap, see *git-shortlog*(1) or
*git-blame*(1))

#+end_quote

/%cl/

#+begin_quote
committer email local-part (the part before the /@/ sign)

#+end_quote

/%cL/

#+begin_quote
committer local-part (see /%cl/) respecting .mailmap, see
*git-shortlog*(1) or *git-blame*(1))

#+end_quote

/%cd/

#+begin_quote
committer date (format respects --date= option)

#+end_quote

/%cD/

#+begin_quote
committer date, RFC2822 style

#+end_quote

/%cr/

#+begin_quote
committer date, relative

#+end_quote

/%ct/

#+begin_quote
committer date, UNIX timestamp

#+end_quote

/%ci/

#+begin_quote
committer date, ISO 8601-like format

#+end_quote

/%cI/

#+begin_quote
committer date, strict ISO 8601 format

#+end_quote

/%cs/

#+begin_quote
committer date, short format (*YYYY-MM-DD*)

#+end_quote

/%ch/

#+begin_quote
committer date, human style (like the *--date=human* option of
*git-rev-list*(1))

#+end_quote

/%d/

#+begin_quote
ref names, like the --decorate option of *git-log*(1)

#+end_quote

/%D/

#+begin_quote
ref names without the " (", ")" wrapping.

#+end_quote

/%(decorate[:<options>])/

#+begin_quote
ref names with custom decorations. The *decorate* string may be followed
by a colon and zero or more comma-separated options. Option values may
contain literal formatting codes. These must be used for commas (*%x2C*)
and closing parentheses (*%x29*), due to their role in the option
syntax.

#+begin_quote
·

/prefix=<value>/: Shown before the list of ref names. Defaults to "
*(*".

#+end_quote

#+begin_quote
·

/suffix=<value>/: Shown after the list of ref names. Defaults to "*)*".

#+end_quote

#+begin_quote
·

/separator=<value>/: Shown between ref names. Defaults to "*,* ".

#+end_quote

#+begin_quote
·

/pointer=<value>/: Shown between HEAD and the branch it points to, if
any. Defaults to " *->* ".

#+end_quote

#+begin_quote
·

/tag=<value>/: Shown before tag names. Defaults to "*tag:* ".

#+end_quote

For example, to produce decorations with no wrapping or tag annotations,
and spaces as separators:

*%(decorate:prefix=,suffix=,tag=,separator= )*

#+end_quote

/%(describe[:<options>])/

#+begin_quote
human-readable name, like *git-describe*(1); empty string for
undescribable commits. The *describe* string may be followed by a colon
and zero or more comma-separated options. Descriptions can be
inconsistent when tags are added or removed at the same time.

#+begin_quote
·

/tags[=<bool-value>]/: Instead of only considering annotated tags,
consider lightweight tags as well.

#+end_quote

#+begin_quote
·

/abbrev=<number>/: Instead of using the default number of hexadecimal
digits (which will vary according to the number of objects in the
repository with a default of 7) of the abbreviated object name, use
<number> digits, or as many digits as needed to form a unique object
name.

#+end_quote

#+begin_quote
·

/match=<pattern>/: Only consider tags matching the given *glob(7)*
pattern, excluding the "refs/tags/" prefix.

#+end_quote

#+begin_quote
·

/exclude=<pattern>/: Do not consider tags matching the given *glob(7)*
pattern, excluding the "refs/tags/" prefix.

#+end_quote

#+end_quote

/%S/

#+begin_quote
ref name given on the command line by which the commit was reached (like
*git log --source*), only works with *git log*

#+end_quote

/%e/

#+begin_quote
encoding

#+end_quote

/%s/

#+begin_quote
subject

#+end_quote

/%f/

#+begin_quote
sanitized subject line, suitable for a filename

#+end_quote

/%b/

#+begin_quote
body

#+end_quote

/%B/

#+begin_quote
raw body (unwrapped subject and body)

#+end_quote

/%N/

#+begin_quote
commit notes

#+end_quote

/%GG/

#+begin_quote
raw verification message from GPG for a signed commit

#+end_quote

/%G?/

#+begin_quote
show "G" for a good (valid) signature, "B" for a bad signature, "U" for
a good signature with unknown validity, "X" for a good signature that
has expired, "Y" for a good signature made by an expired key, "R" for a
good signature made by a revoked key, "E" if the signature cannot be
checked (e.g. missing key) and "N" for no signature

#+end_quote

/%GS/

#+begin_quote
show the name of the signer for a signed commit

#+end_quote

/%GK/

#+begin_quote
show the key used to sign a signed commit

#+end_quote

/%GF/

#+begin_quote
show the fingerprint of the key used to sign a signed commit

#+end_quote

/%GP/

#+begin_quote
show the fingerprint of the primary key whose subkey was used to sign a
signed commit

#+end_quote

/%GT/

#+begin_quote
show the trust level for the key used to sign a signed commit

#+end_quote

/%gD/

#+begin_quote
reflog selector, e.g., *refs/stash@{1}* or *refs/stash@{2 minutes ago}*;
the format follows the rules described for the *-g* option. The portion
before the *@* is the refname as given on the command line (so *git log
-g refs/heads/master* would yield *refs/heads/master@{0}*).

#+end_quote

/%gd/

#+begin_quote
shortened reflog selector; same as *%gD*, but the refname portion is
shortened for human readability (so *refs/heads/master* becomes just
*master*).

#+end_quote

/%gn/

#+begin_quote
reflog identity name

#+end_quote

/%gN/

#+begin_quote
reflog identity name (respecting .mailmap, see *git-shortlog*(1) or
*git-blame*(1))

#+end_quote

/%ge/

#+begin_quote
reflog identity email

#+end_quote

/%gE/

#+begin_quote
reflog identity email (respecting .mailmap, see *git-shortlog*(1) or
*git-blame*(1))

#+end_quote

/%gs/

#+begin_quote
reflog subject

#+end_quote

/%(trailers[:<options>])/

#+begin_quote
display the trailers of the body as interpreted by
*git-interpret-trailers*(1). The *trailers* string may be followed by a
colon and zero or more comma-separated options. If any option is
provided multiple times, the last occurrence wins.

#+begin_quote
·

/key=<key>/: only show trailers with specified <key>. Matching is done
case-insensitively and trailing colon is optional. If option is given
multiple times trailer lines matching any of the keys are shown. This
option automatically enables the *only* option so that non-trailer lines
in the trailer block are hidden. If that is not desired it can be
disabled with *only=false*. E.g., *%(trailers:key=Reviewed-by)* shows
trailer lines with key *Reviewed-by*.

#+end_quote

#+begin_quote
·

/only[=<bool>]/: select whether non-trailer lines from the trailer block
should be included.

#+end_quote

#+begin_quote
·

/separator=<sep>/: specify the separator inserted between trailer lines.
Defaults to a line feed character. The string <sep> may contain the
literal formatting codes described above. To use comma as separator one
must use *%x2C* as it would otherwise be parsed as next option. E.g.,
*%(trailers:key=Ticket,separator=%x2C )* shows all trailer lines whose
key is "Ticket" separated by a comma and a space.

#+end_quote

#+begin_quote
·

/unfold[=<bool>]/: make it behave as if interpret-trailer's *--unfold*
option was given. E.g., *%(trailers:only,unfold=true)* unfolds and shows
all trailer lines.

#+end_quote

#+begin_quote
·

/keyonly[=<bool>]/: only show the key part of the trailer.

#+end_quote

#+begin_quote
·

/valueonly[=<bool>]/: only show the value part of the trailer.

#+end_quote

#+begin_quote
·

/key_value_separator=<sep>/: specify the separator inserted between the
key and value of each trailer. Defaults to ": ". Otherwise it shares the
same semantics as /separator=<sep>/ above.

#+end_quote

#+end_quote

#+end_quote

#+end_quote

#+begin_quote
\\

*Note*

\\

Some placeholders may depend on other options given to the revision
traversal engine. For example, the *%g** reflog options will insert an
empty string unless we are traversing reflog entries (e.g., by *git log
-g*). The *%d* and *%D* placeholders will use the "short" decoration
format if *--decorate* was not already provided on the command line.

#+end_quote

The boolean options accept an optional value *[=<bool-value>]*. The
values *true*, *false*, *on*, *off* etc. are all accepted. See the
"boolean" sub-section in "EXAMPLES" in *git-config*(1). If a boolean
option is given with no value, it's enabled.

If you add a *+* (plus sign) after /%/ of a placeholder, a line-feed is
inserted immediately before the expansion if and only if the placeholder
expands to a non-empty string.

If you add a *-* (minus sign) after /%/ of a placeholder, all
consecutive line-feeds immediately preceding the expansion are deleted
if and only if the placeholder expands to an empty string.

If you add a ` ` (space) after /%/ of a placeholder, a space is inserted
immediately before the expansion if and only if the placeholder expands
to a non-empty string.

#+begin_quote
·

/tformat:/

The /tformat:/ format works exactly like /format:/, except that it
provides "terminator" semantics instead of "separator" semantics. In
other words, each commit has the message terminator character (usually a
newline) appended, rather than a separator placed between entries. This
means that the final entry of a single-line format will be properly
terminated with a new line, just as the "oneline" format does. For
example:

#+begin_quote
#+begin_example
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe $_ .= " -- NO NEWLINE\n" unless /\n/
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe $_ .= " -- NO NEWLINE\n" unless /\n/
4da45be
7134973
#+end_example

#+end_quote

In addition, any unrecognized string that has a *%* in it is interpreted
as if it has *tformat:* in front of it. For example, these two are
equivalent:

#+begin_quote
#+begin_example
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
#+end_example

#+end_quote

#+end_quote

* RAW OUTPUT FORMAT
The raw output format from "git-diff-index", "git-diff-tree",
"git-diff-files" and "git diff --raw" are very similar.

These commands all compare two sets of things; what is compared differs:

git-diff-index <tree-ish>

#+begin_quote
compares the <tree-ish> and the files on the filesystem.

#+end_quote

git-diff-index --cached <tree-ish>

#+begin_quote
compares the <tree-ish> and the index.

#+end_quote

git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>...]

#+begin_quote
compares the trees named by the two arguments.

#+end_quote

git-diff-files [<pattern>...]

#+begin_quote
compares the index and the files on the filesystem.

#+end_quote

The "git-diff-tree" command begins its output by printing the hash of
what is being compared. After that, all the commands print one output
line per changed file.

An output line is formatted this way:

#+begin_quote
#+begin_example
in-place edit  :100644 100644 bcd1234 0123456 M file0
copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
create         :000000 100644 0000000 1234567 A file4
delete         :100644 000000 1234567 0000000 D file5
unmerged       :000000 000000 0000000 0000000 U file6
#+end_example

#+end_quote

That is, from the left to the right:

#+begin_quote
1.

a colon.

#+end_quote

#+begin_quote
2.

mode for "src"; 000000 if creation or unmerged.

#+end_quote

#+begin_quote
3.

a space.

#+end_quote

#+begin_quote
4.

mode for "dst"; 000000 if deletion or unmerged.

#+end_quote

#+begin_quote
5.

a space.

#+end_quote

#+begin_quote
6.

sha1 for "src"; 0{40} if creation or unmerged.

#+end_quote

#+begin_quote
7.

a space.

#+end_quote

#+begin_quote
8.

sha1 for "dst"; 0{40} if deletion, unmerged or "work tree out of sync
with the index".

#+end_quote

#+begin_quote
9.

a space.

#+end_quote

#+begin_quote
10.

status, followed by optional "score" number.

#+end_quote

#+begin_quote
11.

a tab or a NUL when *-z* option is used.

#+end_quote

#+begin_quote
12.

path for "src"

#+end_quote

#+begin_quote
13.

a tab or a NUL when *-z* option is used; only exists for C or R.

#+end_quote

#+begin_quote
14.

path for "dst"; only exists for C or R.

#+end_quote

#+begin_quote
15.

an LF or a NUL when *-z* option is used, to terminate the record.

#+end_quote

Possible status letters are:

#+begin_quote
·

A: addition of a file

#+end_quote

#+begin_quote
·

C: copy of a file into a new one

#+end_quote

#+begin_quote
·

D: deletion of a file

#+end_quote

#+begin_quote
·

M: modification of the contents or mode of a file

#+end_quote

#+begin_quote
·

R: renaming of a file

#+end_quote

#+begin_quote
·

T: change in the type of the file (regular file, symbolic link or
submodule)

#+end_quote

#+begin_quote
·

U: file is unmerged (you must complete the merge before it can be
committed)

#+end_quote

#+begin_quote
·

X: "unknown" change type (most probably a bug, please report it)

#+end_quote

Status letters C and R are always followed by a score (denoting the
percentage of similarity between the source and target of the move or
copy). Status letter M may be followed by a score (denoting the
percentage of dissimilarity) for file rewrites.

The sha1 for "dst" is shown as all 0's if a file on the filesystem is
out of sync with the index.

Example:

#+begin_quote
#+begin_example
:100644 100644 5be4a4a 0000000 M file.c
#+end_example

#+end_quote

Without the *-z* option, pathnames with "unusual" characters are quoted
as explained for the configuration variable *core.quotePath* (see
*git-config*(1)). Using *-z* the filename is output verbatim and the
line is terminated by a NUL byte.

* DIFF FORMAT FOR MERGES
"git-diff-tree", "git-diff-files" and "git-diff --raw" can take *-c* or
*--cc* option to generate diff output also for merge commits. The output
differs from the format described above in the following way:

#+begin_quote
1.

there is a colon for each parent

#+end_quote

#+begin_quote
2.

there are more "src" modes and "src" sha1

#+end_quote

#+begin_quote
3.

status is concatenated status characters for each parent

#+end_quote

#+begin_quote
4.

no optional "score" number

#+end_quote

#+begin_quote
5.

tab-separated pathname(s) of the file

#+end_quote

For *-c* and *--cc*, only the destination or final path is shown even if
the file was renamed on any side of history. With
*--combined-all-paths*, the name of the path in each parent is shown
followed by the name of the path in the merge commit.

Examples for *-c* and *--cc* without *--combined-all-paths*:

#+begin_quote
#+begin_example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c
#+end_example

#+end_quote

Examples when *--combined-all-paths* added to either *-c* or *--cc*:

#+begin_quote
#+begin_example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c
#+end_example

#+end_quote

Note that /combined diff/ lists only files which were modified from all
parents.

* GENERATING PATCH TEXT WITH -P
Running *git-diff*(1), *git-log*(1), *git-show*(1), *git-diff-index*(1),
*git-diff-tree*(1), or *git-diff-files*(1) with the *-p* option produces
patch text. You can customize the creation of patch text via the
*GIT_EXTERNAL_DIFF* and the *GIT_DIFF_OPTS* environment variables (see
*git*(1)), and the *diff* attribute (see *gitattributes*(5)).

What the -p option produces is slightly different from the traditional
diff format:

#+begin_quote
1.

It is preceded by a "git diff" header that looks like this:

#+begin_quote
#+begin_example
diff --git a/file1 b/file2
#+end_example

#+end_quote

The *a/* and *b/* filenames are the same unless rename/copy is involved.
Especially, even for a creation or a deletion, */dev/null* is /not/ used
in place of the *a/* or *b/* filenames.

When a rename/copy is involved, *file1* and *file2* show the name of the
source file of the rename/copy and the name of the file that the
rename/copy produces, respectively.

#+end_quote

#+begin_quote
2.

It is followed by one or more extended header lines:

#+begin_quote
#+begin_example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
#+end_example

#+end_quote

File modes are printed as 6-digit octal numbers including the file type
and file permission bits.

Path names in extended headers do not include the *a/* and *b/*
prefixes.

The similarity index is the percentage of unchanged lines, and the
dissimilarity index is the percentage of changed lines. It is a rounded
down integer, followed by a percent sign. The similarity index value of
100% is thus reserved for two equal files, while 100% dissimilarity
means that no line from the old file made it into the new one.

The index line includes the blob object names before and after the
change. The <mode> is included if the file mode does not change;
otherwise, separate lines indicate the old and the new mode.

#+end_quote

#+begin_quote
3.

Pathnames with "unusual" characters are quoted as explained for the
configuration variable *core.quotePath* (see *git-config*(1)).

#+end_quote

#+begin_quote
4.

All the *file1* files in the output refer to files before the commit,
and all the *file2* files refer to files after the commit. It is
incorrect to apply each change to each file sequentially. For example,
this patch will swap a and b:

#+begin_quote
#+begin_example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
#+end_example

#+end_quote

#+end_quote

#+begin_quote
5.

Hunk headers mention the name of the function to which the hunk applies.
See "Defining a custom hunk-header" in *gitattributes*(5) for details of
how to tailor this to specific languages.

#+end_quote

* COMBINED DIFF FORMAT
Any diff-generating command can take the *-c* or *--cc* option to
produce a /combined diff/ when showing a merge. This is the default
format when showing merges with *git-diff*(1) or *git-show*(1). Note
also that you can give suitable *--diff-merges* option to any of these
commands to force generation of diffs in a specific format.

A "combined diff" format looks like this:

#+begin_quote
#+begin_example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@ -98,20 -98,12 +98,20 @@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  }

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  {
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) {
                initialized = 1;
                for_each_ref(get_name);
#+end_example

#+end_quote

#+begin_quote
1.

It is preceded by a "git diff" header, that looks like this (when the
*-c* option is used):

#+begin_quote
#+begin_example
diff --combined file
#+end_example

#+end_quote

or like this (when the *--cc* option is used):

#+begin_quote
#+begin_example
diff --cc file
#+end_example

#+end_quote

#+end_quote

#+begin_quote
2.

It is followed by one or more extended header lines (this example shows
a merge with two parents):

#+begin_quote
#+begin_example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
#+end_example

#+end_quote

The *mode <mode>,<mode>..<mode>* line appears only if at least one of
the <mode> is different from the rest. Extended headers with information
about detected content movement (renames and copying detection) are
designed to work with the diff of two <tree-ish> and are not used by
combined diff format.

#+end_quote

#+begin_quote
3.

It is followed by a two-line from-file/to-file header:

#+begin_quote
#+begin_example
--- a/file
+++ b/file
#+end_example

#+end_quote

Similar to the two-line header for the traditional /unified/ diff
format, */dev/null* is used to signal created or deleted files.

However, if the --combined-all-paths option is provided, instead of a
two-line from-file/to-file, you get an N+1 line from-file/to-file
header, where N is the number of parents in the merge commit:

#+begin_quote
#+begin_example
--- a/file
--- a/file
--- a/file
+++ b/file
#+end_example

#+end_quote

This extended format can be useful if rename or copy detection is
active, to allow you to see the original name of the file in different
parents.

#+end_quote

#+begin_quote
4.

Chunk header format is modified to prevent people from accidentally
feeding it to *patch -p1*. Combined diff format was created for review
of merge commit changes, and was not meant to be applied. The change is
similar to the change in the extended /index/ header:

#+begin_quote
#+begin_example
@@@ <from-file-range> <from-file-range> <to-file-range> @@@
#+end_example

#+end_quote

There are (number of parents + 1) *@* characters in the chunk header for
combined diff format.

#+end_quote

Unlike the traditional /unified/ diff format, which shows two files A
and B with a single column that has *-* (minus --- appears in A but
removed in B), *+* (plus --- missing in A but added to B), or *" "*
(space --- unchanged) prefix, this format compares two or more files
file1, file2,... with one file X, and shows how X differs from each of
fileN. One column for each of fileN is prepended to the output line to
note how X's line is different from it.

A *-* character in the column N means that the line appears in fileN but
it does not appear in the result. A *+* character in the column N means
that the line appears in the result, and fileN does not have that line
(in other words, the line was added, from the point of view of that
parent).

In the above example output, the function signature was changed from
both files (hence two *-* removals from both file1 and file2, plus *++*
to mean one line that was added does not appear in either file1 or
file2). Also, eight other lines are the same from file1 but do not
appear in file2 (hence prefixed with *+*).

When shown by *git diff-tree -c*, it compares the parents of a merge
commit with the merge result (i.e. file1..fileN are the parents). When
shown by *git diff-files -c*, it compares the two unresolved merge
parents with the working tree file (i.e. file1 is stage 2 aka "our
version", file2 is stage 3 aka "their version").

* OTHER DIFF FORMATS
The *--summary* option describes newly added, deleted, renamed and
copied files. The *--stat* option adds diffstat(1) graph to the output.
These options can be combined with other options, such as *-p*, and are
meant for human consumption.

When showing a change that involves a rename or a copy, *--stat* output
formats the pathnames compactly by combining common prefix and suffix of
the pathnames. For example, a change that moves *arch/i386/Makefile* to
*arch/x86/Makefile* while modifying 4 lines will be shown like this:

#+begin_quote
#+begin_example
arch/{i386 => x86}/Makefile    |   4 +--
#+end_example

#+end_quote

The *--numstat* option gives the diffstat(1) information but is designed
for easier machine consumption. An entry in *--numstat* output looks
like this:

#+begin_quote
#+begin_example
1       2       README
3       1       arch/{i386 => x86}/Makefile
#+end_example

#+end_quote

That is, from left to right:

#+begin_quote
1.

the number of added lines;

#+end_quote

#+begin_quote
2.

a tab;

#+end_quote

#+begin_quote
3.

the number of deleted lines;

#+end_quote

#+begin_quote
4.

a tab;

#+end_quote

#+begin_quote
5.

pathname (possibly with rename/copy information);

#+end_quote

#+begin_quote
6.

a newline.

#+end_quote

When *-z* output option is in effect, the output is formatted this way:

#+begin_quote
#+begin_example
1       2       README NUL
3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
#+end_example

#+end_quote

That is:

#+begin_quote
1.

the number of added lines;

#+end_quote

#+begin_quote
2.

a tab;

#+end_quote

#+begin_quote
3.

the number of deleted lines;

#+end_quote

#+begin_quote
4.

a tab;

#+end_quote

#+begin_quote
5.

a NUL (only exists if renamed/copied);

#+end_quote

#+begin_quote
6.

pathname in preimage;

#+end_quote

#+begin_quote
7.

a NUL (only exists if renamed/copied);

#+end_quote

#+begin_quote
8.

pathname in postimage (only exists if renamed/copied);

#+end_quote

#+begin_quote
9.

a NUL.

#+end_quote

The extra *NUL* before the preimage path in renamed case is to allow
scripts that read the output to tell if the current record being read is
a single-path record or a rename/copy record without reading ahead.
After reading added and deleted lines, reading up to *NUL* would yield
the pathname, but if that is *NUL*, the record will show two paths.

* GIT
Part of the *git*(1) suite
