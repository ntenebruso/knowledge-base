#+TITLE: Manpages - systemd-inhibit.1
* NAME
systemd-inhibit - Execute a program with an inhibition lock taken

* SYNOPSIS
*systemd-inhibit* [OPTIONS...] [COMMAND] [ARGUMENTS...]

*systemd-inhibit* [OPTIONS...] [--list]

* DESCRIPTION
*systemd-inhibit* may be used to execute a program with a shutdown,
sleep, or idle inhibitor lock taken. The lock will be acquired before
the specified command line is executed and released afterwards.

Inhibitor locks may be used to block or delay system sleep and shutdown
requests from the user, as well as automatic idle handling of the OS.
This is useful to avoid system suspends while an optical disc is being
recorded, or similar operations that should not be interrupted.

For more information see *Inhibitor Locks*[1].

* OPTIONS
The following options are understood:

*--what=*

#+begin_quote
Takes a colon-separated list of one or more operations to inhibit:
"shutdown", "sleep", "idle", "handle-power-key", "handle-suspend-key",
"handle-hibernate-key", "handle-lid-switch", for inhibiting
reboot/power-off/halt/kexec/soft-reboot, suspending/hibernating, the
automatic idle detection, or the low-level handling of the power/sleep
key and the lid switch, respectively. If omitted, defaults to
"idle:sleep:shutdown".

#+end_quote

*--who=*

#+begin_quote
Takes a short, human-readable descriptive string for the program taking
the lock. If not passed, defaults to the command line string.

#+end_quote

*--why=*

#+begin_quote
Takes a short, human-readable descriptive string for the reason for
taking the lock. Defaults to "Unknown reason".

#+end_quote

*--mode=*

#+begin_quote
Takes either "block" or "delay" and describes how the lock is applied.
If "block" is used (the default), the lock prohibits any of the
requested operations without time limit, and only privileged users may
override it. If "delay" is used, the lock can only delay the requested
operations for a limited time. If the time elapses, the lock is ignored
and the operation executed. The time limit may be specified in
*logind.conf*(5). Note that "delay" is only available for "sleep" and
"shutdown".

#+end_quote

*--list*

#+begin_quote
Lists all active inhibition locks instead of acquiring one.

#+end_quote

*--no-pager*

#+begin_quote
Do not pipe output into a pager.

#+end_quote

*--no-legend*

#+begin_quote
Do not print the legend, i.e. column headers and the footer with hints.

#+end_quote

*-h*, *--help*

#+begin_quote
Print a short help text and exit.

#+end_quote

*--version*

#+begin_quote
Print a short version string and exit.

#+end_quote

* EXIT STATUS
Returns the exit status of the executed program.

* EXAMPLE

#+begin_quote
#+begin_example
# systemd-inhibit wodim foobar.iso
#+end_example

#+end_quote

This burns the ISO image foobar.iso on a CD using *wodim*(1), and
inhibits system sleeping, shutdown and idle while doing so.

* ENVIRONMENT
/$SYSTEMD_LOG_LEVEL/

#+begin_quote
The maximum log level of emitted messages (messages with a higher log
level, i.e. less important ones, will be suppressed). Takes a
comma-separated list of values. A value may be either one of (in order
of decreasing importance) *emerg*, *alert*, *crit*, *err*, *warning*,
*notice*, *info*, *debug*, or an integer in the range 0...7. See
*syslog*(3) for more information. Each value may optionally be prefixed
with one of *console*, *syslog*, *kmsg* or *journal* followed by a colon
to set the maximum log level for that specific log target (e.g.
*SYSTEMD_LOG_LEVEL=debug,console:info* specifies to log at debug level
except when logging to the console which should be at info level). Note
that the global maximum log level takes priority over any per target
maximum log levels.

#+end_quote

/$SYSTEMD_LOG_COLOR/

#+begin_quote
A boolean. If true, messages written to the tty will be colored
according to priority.

This setting is only useful when messages are written directly to the
terminal, because *journalctl*(1) and other tools that display logs will
color messages based on the log level on their own.

#+end_quote

/$SYSTEMD_LOG_TIME/

#+begin_quote
A boolean. If true, console log messages will be prefixed with a
timestamp.

This setting is only useful when messages are written directly to the
terminal or a file, because *journalctl*(1) and other tools that display
logs will attach timestamps based on the entry metadata on their own.

#+end_quote

/$SYSTEMD_LOG_LOCATION/

#+begin_quote
A boolean. If true, messages will be prefixed with a filename and line
number in the source code where the message originates.

Note that the log location is often attached as metadata to journal
entries anyway. Including it directly in the message text can
nevertheless be convenient when debugging programs.

#+end_quote

/$SYSTEMD_LOG_TID/

#+begin_quote
A boolean. If true, messages will be prefixed with the current numerical
thread ID (TID).

Note that the this information is attached as metadata to journal
entries anyway. Including it directly in the message text can
nevertheless be convenient when debugging programs.

#+end_quote

/$SYSTEMD_LOG_TARGET/

#+begin_quote
The destination for log messages. One of *console* (log to the attached
tty), *console-prefixed* (log to the attached tty but with prefixes
encoding the log level and "facility", see *syslog*(3), *kmsg* (log to
the kernel circular log buffer), *journal* (log to the journal),
*journal-or-kmsg* (log to the journal if available, and to kmsg
otherwise), *auto* (determine the appropriate log target automatically,
the default), *null* (disable log output).

#+end_quote

/$SYSTEMD_LOG_RATELIMIT_KMSG/

#+begin_quote
Whether to ratelimit kmsg or not. Takes a boolean. Defaults to "true".
If disabled, systemd will not ratelimit messages written to kmsg.

#+end_quote

/$SYSTEMD_PAGER/

#+begin_quote
Pager to use when *--no-pager* is not given; overrides /$PAGER/. If
neither /$SYSTEMD_PAGER/ nor /$PAGER/ are set, a set of well-known pager
implementations are tried in turn, including *less*(1) and *more*(1),
until one is found. If no pager implementation is discovered no pager is
invoked. Setting this environment variable to an empty string or the
value "cat" is equivalent to passing *--no-pager*.

Note: if /$SYSTEMD_PAGERSECURE/ is not set, /$SYSTEMD_PAGER/ (as well as
/$PAGER/) will be silently ignored.

#+end_quote

/$SYSTEMD_LESS/

#+begin_quote
Override the options passed to *less* (by default "FRSXMK").

Users might want to change two options in particular:

*K*

#+begin_quote
This option instructs the pager to exit immediately when Ctrl+C is
pressed. To allow *less* to handle Ctrl+C itself to switch back to the
pager command prompt, unset this option.

If the value of /$SYSTEMD_LESS/ does not include "K", and the pager that
is invoked is *less*, Ctrl+C will be ignored by the executable, and
needs to be handled by the pager.

#+end_quote

*X*

#+begin_quote
This option instructs the pager to not send termcap initialization and
deinitialization strings to the terminal. It is set by default to allow
command output to remain visible in the terminal even after the pager
exits. Nevertheless, this prevents some pager functionality from
working, in particular paged output cannot be scrolled with the mouse.

#+end_quote

Note that setting the regular /$LESS/ environment variable has no effect
for *less* invocations by systemd tools.

See *less*(1) for more discussion.

#+end_quote

/$SYSTEMD_LESSCHARSET/

#+begin_quote
Override the charset passed to *less* (by default "utf-8", if the
invoking terminal is determined to be UTF-8 compatible).

Note that setting the regular /$LESSCHARSET/ environment variable has no
effect for *less* invocations by systemd tools.

#+end_quote

/$SYSTEMD_PAGERSECURE/

#+begin_quote
Takes a boolean argument. When true, the "secure" mode of the pager is
enabled; if false, disabled. If /$SYSTEMD_PAGERSECURE/ is not set at
all, secure mode is enabled if the effective UID is not the same as the
owner of the login session, see *geteuid*(2) and
*sd_pid_get_owner_uid*(3). In secure mode, *LESSSECURE=1* will be set
when invoking the pager, and the pager shall disable commands that open
or create new files or start new subprocesses. When
/$SYSTEMD_PAGERSECURE/ is not set at all, pagers which are not known to
implement secure mode will not be used. (Currently only *less*(1)
implements secure mode.)

Note: when commands are invoked with elevated privileges, for example
under *sudo*(8) or *pkexec*(1), care must be taken to ensure that
unintended interactive features are not enabled. "Secure" mode for the
pager may be enabled automatically as describe above. Setting
/SYSTEMD_PAGERSECURE=0/ or not removing it from the inherited
environment allows the user to invoke arbitrary commands. Note that if
the /$SYSTEMD_PAGER/ or /$PAGER/ variables are to be honoured,
/$SYSTEMD_PAGERSECURE/ must be set too. It might be reasonable to
completely disable the pager using *--no-pager* instead.

#+end_quote

/$SYSTEMD_COLORS/

#+begin_quote
Takes a boolean argument. When true, *systemd* and related utilities
will use colors in their output, otherwise the output will be
monochrome. Additionally, the variable can take one of the following
special values: "16", "256" to restrict the use of colors to the base 16
or 256 ANSI colors, respectively. This can be specified to override the
automatic decision based on /$TERM/ and what the console is connected
to.

#+end_quote

/$SYSTEMD_URLIFY/

#+begin_quote
The value must be a boolean. Controls whether clickable links should be
generated in the output for terminal emulators supporting this. This can
be specified to override the decision that *systemd* makes based on
/$TERM/ and other conditions.

#+end_quote

* SEE ALSO
*systemd*(1), *logind.conf*(5)

* NOTES
-  1. :: Inhibitor Locks

  https://systemd.io/INHIBITOR_LOCKS
