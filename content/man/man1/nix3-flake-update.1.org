#+TITLE: Manpages - nix3-flake-update.1
#+begin_quote
*Warning*\\
This program is *experimental* and its interface is subject to change.

#+end_quote

* Name
=nix flake update= - update flake lock file

* Synopsis
=nix flake update= [/option/...] /inputs/...

* Examples
- Update all inputs (i.e. recreate the lock file from scratch):

#+begin_example
# nix flake update
warning: updating lock file '/home/myself/repos/testflake/flake.lock':
• Updated input 'nix':
  'github:NixOS/nix/9fab14adbc3810d5cc1f88672fde1eee4358405c' (2023-06-28)
→ 'github:NixOS/nix/8927cba62f5afb33b01016d5c4f7f8b7d0adde3c' (2023-07-11)
• Updated input 'nixpkgs':
  'github:NixOS/nixpkgs/3d2d8f281a27d466fa54b469b5993f7dde198375' (2023-06-30)
→ 'github:NixOS/nixpkgs/a3a3dda3bacf61e8a39258a0ed9c924eeca8e293' (2023-07-05)
#+end_example

- Update only a single input:

#+begin_example
# nix flake update nixpkgs
warning: updating lock file '/home/myself/repos/testflake/flake.lock':
• Updated input 'nixpkgs':
  'github:NixOS/nixpkgs/3d2d8f281a27d466fa54b469b5993f7dde198375' (2023-06-30)
→ 'github:NixOS/nixpkgs/a3a3dda3bacf61e8a39258a0ed9c924eeca8e293' (2023-07-05)
#+end_example

- Update only a single input of a flake in a different directory:

#+begin_example
# nix flake update nixpkgs --flake ~/repos/another
warning: updating lock file '/home/myself/repos/another/flake.lock':
• Updated input 'nixpkgs':
  'github:NixOS/nixpkgs/3d2d8f281a27d466fa54b469b5993f7dde198375' (2023-06-30)
→ 'github:NixOS/nixpkgs/a3a3dda3bacf61e8a39258a0ed9c924eeca8e293' (2023-07-05)
#+end_example

#+begin_quote

#+begin_quote
*Note*

#+end_quote

#+begin_quote
When trying to refer to a flake in a subdirectory, write =./another=
instead of =another=. Otherwise Nix will try to look up the flake in the
registry.

#+end_quote

#+end_quote

* Description
This command updates the inputs in a lock file (=flake.lock=). *By
default, all inputs are updated*. If the lock file doesn't exist yet, it
will be created. If inputs are not in the lock file yet, they will be
added.

Unlike other =nix flake= commands, =nix flake update= takes a list of
names of inputs to update as its positional arguments and operates on
the flake in the current directory. You can pass a different flake-url
with =--flake= to override that default.

The related command =nix flake lock= also creates lock files and adds
missing inputs, but is safer as it will never update inputs already in
the lock file.

* Options
- =--flake= /flake-url/

  The flake to operate on. Default is the current directory.

** Common evaluation options
- =--arg= /name/ /expr/

  Pass the value /expr/ as the argument /name/ to Nix functions.

- =--arg-from-file= /name/ /path/

  Pass the contents of file /path/ as the argument /name/ to Nix
  functions.

- =--arg-from-stdin= /name/

  Pass the contents of stdin as the argument /name/ to Nix functions.

- =--argstr= /name/ /string/

  Pass the string /string/ as the argument /name/ to Nix functions.

- =--debugger=

  Start an interactive environment if evaluation fails.

- =--eval-store= /store-url/

  The *URL of the Nix store* to use for evaluation, i.e. to store
  derivations (=.drv= files) and inputs referenced by them.

- =--impure=

  Allow access to mutable paths and repositories.

- =--include= / =-I= /path/

  Add /path/ to search path entries used to resolve *lookup paths*

  This option may be given multiple times.

  Paths added through =-I= take precedence over the =nix-path=
  configuration setting and the =NIX_PATH= environment variable.

- =--override-flake= /original-ref/ /resolved-ref/

  Override the flake registries, redirecting /original-ref/ to
  /resolved-ref/.

** Common flake-related options
- =--commit-lock-file=

  Commit changes to the flake's lock file.

- =--inputs-from= /flake-url/

  Use the inputs of the specified flake as registry entries.

- =--no-registries=

  Don't allow lookups in the flake registries.

  #+begin_quote
  *DEPRECATED*

  #+end_quote

  #+begin_quote
  Use =--no-use-registries= instead.

  #+end_quote

- =--output-lock-file= /flake-lock-path/

  Write the given lock file instead of =flake.lock= within the top-level
  flake.

- =--override-input= /input-path/ /flake-url/

  Override a specific flake input (e.g. =dwarffs/nixpkgs=). This implies
  =--no-write-lock-file=.

- =--recreate-lock-file=

  Recreate the flake's lock file from scratch.

  #+begin_quote
  *DEPRECATED*

  #+end_quote

  #+begin_quote
  Use =nix flake update= instead.

  #+end_quote

- =--reference-lock-file= /flake-lock-path/

  Read the given lock file instead of =flake.lock= within the top-level
  flake.

- =--update-input= /input-path/

  Update a specific flake input (ignoring its previous entry in the lock
  file).

  #+begin_quote
  *DEPRECATED*

  #+end_quote

  #+begin_quote
  Use =nix flake update= instead.

  #+end_quote

** Logging-related options
- =--debug=

  Set the logging verbosity level to ‘debug'.

- =--log-format= /format/

  Set the format of log output; one of =raw=, =internal-json=, =bar= or
  =bar-with-logs=.

- =--print-build-logs= / =-L=

  Print full build logs on standard error.

- =--quiet=

  Decrease the logging verbosity level.

- =--verbose= / =-v=

  Increase the logging verbosity level.

** Miscellaneous global options
- =--help=

  Show usage information.

- =--offline=

  Disable substituters and consider all previously downloaded files
  up-to-date.

- =--option= /name/ /value/

  Set the Nix configuration setting /name/ to /value/ (overriding
  =nix.conf=).

- =--refresh=

  Consider all previously downloaded files out-of-date.

- =--repair=

  During evaluation, rewrite missing or corrupted files in the Nix
  store. During building, rebuild missing or corrupted store paths.

- =--version=

  Show version information.

  *Note*

  See =man nix.conf= for overriding configuration settings with command
  line flags.
