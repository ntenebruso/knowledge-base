#+TITLE: Manpages - nix-store-query.1
* Name
=nix-store --query= - display information about store paths

* Synopsis
=nix-store= {=--query= | =-q=} {=--outputs= | =--requisites= | =-R= |
=--references= | =--referrers= | =--referrers-closure= | =--deriver= |
=-d= | =--valid-derivers= | =--graph= | =--tree= | =--binding= /name/ |
=-b= /name/ | =--hash= | =--size= | =--roots=} [=--use-output=] [=-u=]
[=--force-realise=] [=-f=] /paths.../

* Description
The operation =--query= displays various bits of information about the
store paths . The queries are described below. At most one query can be
specified. The default query is =--outputs=.

The paths /paths/ may also be symlinks from outside of the Nix store, to
the Nix store. In that case, the query is applied to the target of the
symlink.

* Common query options
- =--use-output= / =-u=

  For each argument to the query that is a *store derivation*, apply the
  query to the output path of the derivation instead.

- =--force-realise= / =-f=

  Realise each argument to the query first (see =nix-store --realise=).

* Queries
- =--outputs=

  Prints out the *output paths* of the store derivations /paths/. These
  are the paths that will be produced when the derivation is built.

- =--requisites= / =-R=

  Prints out the *closure* of the store path /paths/.

  This query has one option:

  - =--include-outputs= Also include the existing output paths of *store
    derivation*s, and their closures.

  This query can be used to implement various kinds of deployment. A
  /source deployment/ is obtained by distributing the closure of a store
  derivation. A /binary deployment/ is obtained by distributing the
  closure of an output path. A /cache deployment/ (combined
  source/binary deployment, including binaries of build-time-only
  dependencies) is obtained by distributing the closure of a store
  derivation and specifying the option =--include-outputs=.

- =--references=

  Prints the set of *references* of the store paths /paths/, that is,
  their immediate dependencies. (For /all/ dependencies, use
  =--requisites=.)

- =--referrers=

  Prints the set of /referrers/ of the store paths /paths/, that is, the
  store paths currently existing in the Nix store that refer to one of
  /paths/. Note that contrary to the references, the set of referrers is
  not constant; it can change as store paths are added or removed.

- =--referrers-closure=

  Prints the closure of the set of store paths /paths/ under the
  referrers relation; that is, all store paths that directly or
  indirectly refer to one of /paths/. These are all the path currently
  in the Nix store that are dependent on /paths/.

- =--deriver= / =-d=

  Prints the *deriver* that was used to build the store paths /paths/.
  If the path has no deriver (e.g., if it is a source file), or if the
  deriver is not known (e.g., in the case of a binary-only deployment),
  the string =unknown-deriver= is printed. The returned deriver is not
  guaranteed to exist in the local store, for example when /paths/ were
  substituted from a binary cache. Use =--valid-derivers= instead to
  obtain valid paths only.

- =--valid-derivers=

  Prints a set of derivation files (=.drv=) which are supposed produce
  said paths when realized. Might print nothing, for example for source
  paths or paths subsituted from a binary cache.

- =--graph=

  Prints the references graph of the store paths /paths/ in the format
  of the =dot= tool of AT&T's *Graphviz* package. This can be used to
  visualise dependency graphs. To obtain a build-time dependency graph,
  apply this to a store derivation. To obtain a runtime dependency
  graph, apply it to an output path.

- =--tree=

  Prints the references graph of the store paths /paths/ as a nested
  ASCII tree. References are ordered by descending closure size; this
  tends to flatten the tree, making it more readable. The query only
  recurses into a store path when it is first encountered; this prevents
  a blowup of the tree representation of the graph.

- =--graphml=

  Prints the references graph of the store paths /paths/ in the
  *GraphML* file format. This can be used to visualise dependency
  graphs. To obtain a build-time dependency graph, apply this to a
  *store derivation*. To obtain a runtime dependency graph, apply it to
  an output path.

- =--binding= /name/ / =-b= /name/

  Prints the value of the attribute /name/ (i.e., environment variable)
  of the *store derivation*s /paths/. It is an error for a derivation to
  not have the specified attribute.

- =--hash=

  Prints the SHA-256 hash of the contents of the store paths /paths/
  (that is, the hash of the output of =nix-store --dump= on the given
  paths). Since the hash is stored in the Nix database, this is a fast
  operation.

- =--size=

  Prints the size in bytes of the contents of the store paths /paths/
  --- to be precise, the size of the output of =nix-store --dump= on the
  given paths. Note that the actual disk space required by the store
  paths may be higher, especially on filesystems with large cluster
  sizes.

- =--roots=

  Prints the garbage collector roots that point, directly or indirectly,
  at the store paths /paths/.

* Options
The following options are allowed for all =nix-store= operations, but
may not always have an effect.

- =--add-root= /path/

  Causes the result of a realisation (=--realise= and =--force-realise=)
  to be registered as a root of the garbage collector. /path/ will be
  created as a symlink to the resulting store path. In addition, a
  uniquely named symlink to /path/ will be created in
  =/nix/var/nix/gcroots/auto/=. For instance,

#+begin_example
$ nix-store --add-root /home/eelco/bla/result --realise ...

$ ls -l /nix/var/nix/gcroots/auto
lrwxrwxrwx    1 ... 2005-03-13 21:10 dn54lcypm8f8... -> /home/eelco/bla/result

$ ls -l /home/eelco/bla/result
lrwxrwxrwx    1 ... 2005-03-13 21:10 /home/eelco/bla/result -> /nix/store/1r11343n6qd4...-f-spot-0.0.10
#+end_example

#+begin_quote
Thus, when =/home/eelco/bla/result= is removed, the GC root in the
=auto= directory becomes a dangling symlink and will be ignored by the
collector.

#+end_quote

#+begin_quote

#+begin_quote
*Warning*

#+end_quote

#+begin_quote
Note that it is not possible to move or rename GC roots, since the
symlink in the =auto= directory will still point to the old location.

#+end_quote

#+end_quote

#+begin_quote
If there are multiple results, then multiple symlinks will be created by
sequentially numbering symlinks beyond the first one (e.g., =foo=,
=foo-2=, =foo-3=, and so on).

#+end_quote

* Common Options
Most Nix commands accept the following command-line options:

- =--help=

  Prints out a summary of the command syntax and exits.

- =--version=

  Prints out the Nix version number on standard output and exits.

- =--verbose= / =-v=

  Increases the level of verbosity of diagnostic messages printed on
  standard error. For each Nix operation, the information printed on
  standard output is well-defined; any diagnostic information is printed
  on standard error, never on standard output.

  This option may be specified repeatedly. Currently, the following
  verbosity levels exist:

  - =0= “Errors only”

  Only print messages explaining why the Nix invocation failed.

  - =1= “Informational”

  Print /useful/ messages about what Nix is doing. This is the default.

  - =2= “Talkative”

  Print more informational messages.

  - =3= “Chatty”

  Print even more informational messages.

  - =4= “Debug”

  Print debug information.

  - =5= “Vomit”

  Print vast amounts of debug information.

- =--quiet=

  Decreases the level of verbosity of diagnostic messages printed on
  standard error. This is the inverse option to =-v= / =--verbose=.

  This option may be specified repeatedly. See the previous verbosity
  levels list.

- =--log-format= /format/

  This option can be used to change the output of the log format, with
  /format/ being one of:

  - =raw=

  This is the raw format, as outputted by nix-build.

  - =internal-json=

  Outputs the logs in a structured manner.

  #+begin_quote
  *Warning*

  #+end_quote

  #+begin_quote
  While the schema itself is relatively stable, the format of the
  error-messages (namely of the =msg=-field) can change between
  releases.

  #+end_quote

  - =bar=

  Only display a progress bar during the builds.

  - =bar-with-logs=

  Display the raw logs, with the progress bar at the bottom.

- =--no-build-output= / =-Q=

  By default, output written by builders to standard output and standard
  error is echoed to the Nix command's standard error. This option
  suppresses this behaviour. Note that the builder's standard output and
  error are always written to a log file in =prefix/nix/var/log/nix=.

- =--max-jobs= / =-j= /number/

  Sets the maximum number of build jobs that Nix will perform in
  parallel to the specified number. Specify =auto= to use the number of
  CPUs in the system. The default is specified by the =max-jobs=
  configuration setting, which itself defaults to =1=. A higher value is
  useful on SMP systems or to exploit I/O latency.

  Setting it to =0= disallows building on the local machine, which is
  useful when you want builds to happen only on remote builders.

- =--cores=

  Sets the value of the =NIX_BUILD_CORES= environment variable in the
  invocation of builders. Builders can use this variable at their
  discretion to control the maximum amount of parallelism. For instance,
  in Nixpkgs, if the derivation attribute =enableParallelBuilding= is
  set to =true=, the builder passes the =-jN= flag to GNU Make. It
  defaults to the value of the =cores= configuration setting, if set, or
  =1= otherwise. The value =0= means that the builder should use all
  available CPU cores in the system.

- =--max-silent-time=

  Sets the maximum number of seconds that a builder can go without
  producing any data on standard output or standard error. The default
  is specified by the =max-silent-time= configuration setting. =0= means
  no time-out.

- =--timeout=

  Sets the maximum number of seconds that a builder can run. The default
  is specified by the =timeout= configuration setting. =0= means no
  timeout.

- =--keep-going= / =-k=

  Keep going in case of failed builds, to the greatest extent possible.
  That is, if building an input of some derivation fails, Nix will still
  build the other inputs, but not the derivation itself. Without this
  option, Nix stops if any build fails (except for builds of
  substitutes), possibly killing builds in progress (in case of parallel
  or distributed builds).

- =--keep-failed= / =-K=

  Specifies that in case of a build failure, the temporary directory
  (usually in =/tmp=) in which the build takes place should not be
  deleted. The path of the build directory is printed as an
  informational message.

- =--fallback=

  Whenever Nix attempts to build a derivation for which substitutes are
  known for each output path, but realising the output paths through the
  substitutes fails, fall back on building the derivation.

  The most common scenario in which this is useful is when we have
  registered substitutes in order to perform binary distribution from,
  say, a network repository. If the repository is down, the realisation
  of the derivation will fail. When this option is specified, Nix will
  build the derivation instead. Thus, installation from binaries falls
  back on installation from source. This option is not the default since
  it is generally not desirable for a transient failure in obtaining the
  substitutes to lead to a full build from source (with the related
  consumption of resources).

- =--readonly-mode=

  When this option is used, no attempt is made to open the Nix database.
  Most Nix operations do need database access, so those operations will
  fail.

- =--arg= /name/ /value/

  This option is accepted by =nix-env=, =nix-instantiate=, =nix-shell=
  and =nix-build=. When evaluating Nix expressions, the expression
  evaluator will automatically try to call functions that it encounters.
  It can automatically call functions for which every argument has a
  *default value* (e.g., ={ argName ?  defaultValue }: ...=).

  With =--arg=, you can also call functions that have arguments without
  a default value (or override a default value). That is, if the
  evaluator encounters a function with an argument named /name/, it will
  call it with value /value/.

  For instance, the top-level =default.nix= in Nixpkgs is actually a
  function:

#+begin_example
{ # The system (e.g., `i686-linux') for which to build the packages.
system ? builtins.currentSystem
...
}: ...
#+end_example

#+begin_quote
So if you call this Nix expression (e.g., when you do
=nix-env --install --attr pkgname=), the function will be called
automatically using the value =builtins.currentSystem= for the =system=
argument. You can override this using =--arg=, e.g.,
=nix-env --install --attr pkgname --arg system \"i686-freebsd\"=. (Note
that since the argument is a Nix string literal, you have to escape the
quotes.)

#+end_quote

- =--argstr= /name/ /value/

  This option is like =--arg=, only the value is not a Nix expression
  but a string. So instead of =--arg system \"i686-linux\"= (the outer
  quotes are to keep the shell happy) you can say
  =--argstr system i686-linux=.

- =--attr= / =-A= /attrPath/

  Select an attribute from the top-level Nix expression being evaluated.
  (=nix-env=, =nix-instantiate=, =nix-build= and =nix-shell= only.) The
  /attribute path/ /attrPath/ is a sequence of attribute names separated
  by dots. For instance, given a top-level Nix expression /e/, the
  attribute path =xorg.xorgserver= would cause the expression
  =e.xorg.xorgserver= to be used. See =nix-env --install= for some
  concrete examples.

  In addition to attribute names, you can also specify array indices.
  For instance, the attribute path =foo.3.bar= selects the =bar=
  attribute of the fourth element of the array in the =foo= attribute of
  the top-level expression.

- =--expr= / =-E=

  Interpret the command line arguments as a list of Nix expressions to
  be parsed and evaluated, rather than as a list of file names of Nix
  expressions. (=nix-instantiate=, =nix-build= and =nix-shell= only.)

  For =nix-shell=, this option is commonly used to give you a shell in
  which you can build the packages returned by the expression. If you
  want to get a shell which contain the /built/ packages ready for use,
  give your expression to the =nix-shell --packages= convenience flag
  instead.

- =-I= / =--include= /path/

  Add an entry to the list of search paths used to resolve *lookup
  paths*. This option may be given multiple times.

  Paths added through =-I= take precedence over the =nix-path=
  configuration setting and the =NIX_PATH= environment variable.

- =--option= /name/ /value/

  Set the Nix configuration option /name/ to /value/. This overrides
  settings in the Nix configuration file (see nix.conf5).

- =--repair=

  Fix corrupted or missing store paths by redownloading or rebuilding
  them. Note that this is slow because it requires computing a
  cryptographic hash of the contents of every path in the closure of the
  build. Also note the warning under =nix-store --repair-path=.

  *Note*

  See =man nix.conf= for overriding configuration settings with command
  line flags.

* Common Environment Variables
Most Nix commands interpret the following environment variables:

- =IN_NIX_SHELL=

  Indicator that tells if the current environment was set up by
  =nix-shell=. It can have the values =pure= or =impure=.

- =NIX_PATH=

  A colon-separated list of search path entries used to resolve *lookup
  paths*.

  This environment variable overrides the value of the =nix-path=
  configuration setting.

  It can be extended using the =-I= option.

  #+begin_quote
  *Example*

  #+end_quote

  #+begin_example
  $ export NIX_PATH=`/home/eelco/Dev:nixos-config=/etc/nixos
  #+end_example

  If =NIX_PATH= is set to an empty string, resolving search paths will
  always fail.

  #+begin_quote
  *Example*

  #+end_quote

  #+begin_example
  $ NIX_PATH= nix-instantiate --eval '<nixpkgs>'
  error: file 'nixpkgs' was not found in the Nix search path (add it using $NIX_PATH or -I)
  #+end_example

- =NIX_IGNORE_SYMLINK_STORE=

  Normally, the Nix store directory (typically =/nix/store=) is not
  allowed to contain any symlink components. This is to prevent “impure”
  builds. Builders sometimes “canonicalise” paths by resolving all
  symlink components. Thus, builds on different machines (with
  =/nix/store= resolving to different locations) could yield different
  results. This is generally not a problem, except when builds are
  deployed to machines where =/nix/store= resolves differently. If you
  are sure that you're not going to do that, you can set
  =NIX_IGNORE_SYMLINK_STORE= to =1=.

  Note that if you're symlinking the Nix store so that you can put it on
  another file system than the root file system, on Linux you're better
  off using =bind= mount points, e.g.,

#+begin_example
$ mkdir /nix
$ mount -o bind /mnt/otherdisk/nix /nix
#+end_example

#+begin_quote
Consult the mount 8 manual page for details.

#+end_quote

- =NIX_STORE_DIR=

  Overrides the location of the Nix store (default =prefix/store=).

- =NIX_DATA_DIR=

  Overrides the location of the Nix static data directory (default
  =prefix/share=).

- =NIX_LOG_DIR=

  Overrides the location of the Nix log directory (default
  =prefix/var/log/nix=).

- =NIX_STATE_DIR=

  Overrides the location of the Nix state directory (default
  =prefix/var/nix=).

- =NIX_CONF_DIR=

  Overrides the location of the system Nix configuration directory
  (default =prefix/etc/nix=).

- =NIX_CONFIG=

  Applies settings from Nix configuration from the environment. The
  content is treated as if it was read from a Nix configuration file.
  Settings are separated by the newline character.

- =NIX_USER_CONF_FILES=

  Overrides the location of the Nix user configuration files to load
  from.

  The default are the locations according to the *XDG Base Directory
  Specification*. See the *XDG Base Directories* sub-section for
  details.

  The variable is treated as a list separated by the =:= token.

- =TMPDIR=

  Use the specified directory to store temporary files. In particular,
  this includes temporary build directories; these can take up
  substantial amounts of disk space. The default is =/tmp=.

- =NIX_REMOTE=

  This variable should be set to =daemon= if you want to use the Nix
  daemon to execute Nix operations. This is necessary in *multi-user*
  Nix installations. If the Nix daemon's Unix socket is at some
  non-standard path, this variable should be set to
  =unix://path/to/socket=. Otherwise, it should be left unset.

- =NIX_SHOW_STATS=

  If set to =1=, Nix will print some evaluation statistics, such as the
  number of values allocated.

- =NIX_COUNT_CALLS=

  If set to =1=, Nix will print how often functions were called during
  Nix expression evaluation. This is useful for profiling your Nix
  expressions.

- =GC_INITIAL_HEAP_SIZE=

  If Nix has been configured to use the Boehm garbage collector, this
  variable sets the initial size of the heap in bytes. It defaults to
  384 MiB. Setting it to a low value reduces memory consumption, but
  will increase runtime due to the overhead of garbage collection.

** XDG Base Directories
Nix follows the *XDG Base Directory Specification*.

For backwards compatibility, Nix commands will follow the standard only
when =use-xdg-base-directories= is enabled. *New Nix commands*
(experimental) conform to the standard by default.

The following environment variables are used to determine locations of
various state and configuration files:

- [=XDG_CONFIG_HOME=]{#env-XDG/CONFIG/HOME} (default =~/.config=)

- [=XDG_STATE_HOME=]{#env-XDG/STATE/HOME} (default =~/.local/state=)

- [=XDG_CACHE_HOME=]{#env-XDG/CACHE/HOME} (default =~/.cache=)

* Examples
Print the closure (runtime dependencies) of the =svn= program in the
current user environment:

#+begin_example
$ nix-store --query --requisites $(which svn)
/nix/store/5mbglq5ldqld8sj57273aljwkfvj22mc-subversion-1.1.4
/nix/store/9lz9yc6zgmc0vlqmn2ipcpkjlmbi51vv-glibc-2.3.4
...
#+end_example

Print the build-time dependencies of =svn=:

#+begin_example
$ nix-store --query --requisites $(nix-store --query --deriver $(which svn))
/nix/store/02iizgn86m42q905rddvg4ja975bk2i4-grep-2.5.1.tar.bz2.drv
/nix/store/07a2bzxmzwz5hp58nf03pahrv2ygwgs3-gcc-wrapper.sh
/nix/store/0ma7c9wsbaxahwwl04gbw3fcd806ski4-glibc-2.3.4.drv
... lots of other paths ...
#+end_example

The difference with the previous example is that we ask the closure of
the derivation (=-qd=), not the closure of the output path that contains
=svn=.

Show the build-time dependencies as a tree:

#+begin_example
$ nix-store --query --tree $(nix-store --query --deriver $(which svn))
/nix/store/7i5082kfb6yjbqdbiwdhhza0am2xvh6c-subversion-1.1.4.drv
+---/nix/store/d8afh10z72n8l1cr5w42366abiblgn54-builder.sh
+---/nix/store/fmzxmpjx2lh849ph0l36snfj9zdibw67-bash-3.0.drv
|   +---/nix/store/570hmhmx3v57605cqg9yfvvyh0nnb8k8-bash
|   +---/nix/store/p3srsbd8dx44v2pg6nbnszab5mcwx03v-builder.sh
...
#+end_example

Show all paths that depend on the same OpenSSL library as =svn=:

#+begin_example
$ nix-store --query --referrers $(nix-store --query --binding openssl $(nix-store --query --deriver $(which svn)))
/nix/store/23ny9l9wixx21632y2wi4p585qhva1q8-sylpheed-1.0.0
/nix/store/5mbglq5ldqld8sj57273aljwkfvj22mc-subversion-1.1.4
/nix/store/dpmvp969yhdqs7lm2r1a3gng7pyq6vy4-subversion-1.1.3
/nix/store/l51240xqsgg8a7yrbqdx1rfzyv6l26fx-lynx-2.8.5
#+end_example

Show all paths that directly or indirectly depend on the Glibc (C
library) used by =svn=:

#+begin_example
$ nix-store --query --referrers-closure $(ldd $(which svn) | grep /libc.so | awk '{print $3}')
/nix/store/034a6h4vpz9kds5r6kzb9lhh81mscw43-libgnomeprintui-2.8.2
/nix/store/15l3yi0d45prm7a82pcrknxdh6nzmxza-gawk-3.1.4
...
#+end_example

Note that =ldd= is a command that prints out the dynamic libraries used
by an ELF executable.

Make a picture of the runtime dependency graph of the current user
environment:

#+begin_example
$ nix-store --query --graph ~/.nix-profile | dot -Tps > graph.ps
$ gv graph.ps
#+end_example

Show every garbage collector root that points to a store path that
depends on =svn=:

#+begin_example
$ nix-store --query --roots $(which svn)
/nix/var/nix/profiles/default-81-link
/nix/var/nix/profiles/default-82-link
/home/eelco/.local/state/nix/profiles/profile-97-link
#+end_example
