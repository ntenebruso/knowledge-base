#+TITLE: Manpages - git-fsck.1
* NAME
git-fsck - Verifies the connectivity and validity of the objects in the
database

* SYNOPSIS
#+begin_example
git fsck [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]
         [--[no-]full] [--strict] [--verbose] [--lost-found]
         [--[no-]dangling] [--[no-]progress] [--connectivity-only]
         [--[no-]name-objects] [<object>...]
#+end_example

* DESCRIPTION
Verifies the connectivity and validity of the objects in the database.

* OPTIONS
<object>

#+begin_quote
An object to treat as the head of an unreachability trace.

If no objects are given, /git fsck/ defaults to using the index file,
all SHA-1 references in the *refs* namespace, and all reflogs (unless
--no-reflogs is given) as heads.

#+end_quote

--unreachable

#+begin_quote
Print out objects that exist but that aren't reachable from any of the
reference nodes.

#+end_quote

--[no-]dangling

#+begin_quote
Print objects that exist but that are never /directly/ used (default).
*--no-dangling* can be used to omit this information from the output.

#+end_quote

--root

#+begin_quote
Report root nodes.

#+end_quote

--tags

#+begin_quote
Report tags.

#+end_quote

--cache

#+begin_quote
Consider any object recorded in the index also as a head node for an
unreachability trace.

#+end_quote

--no-reflogs

#+begin_quote
Do not consider commits that are referenced only by an entry in a reflog
to be reachable. This option is meant only to search for commits that
used to be in a ref, but now aren't, but are still in that corresponding
reflog.

#+end_quote

--full

#+begin_quote
Check not just objects in GIT_OBJECT_DIRECTORY ($GIT_DIR/objects), but
also the ones found in alternate object pools listed in
GIT_ALTERNATE_OBJECT_DIRECTORIES or $GIT_DIR/objects/info/alternates,
and in packed Git archives found in $GIT_DIR/objects/pack and
corresponding pack subdirectories in alternate object pools. This is now
default; you can turn it off with --no-full.

#+end_quote

--connectivity-only

#+begin_quote
Check only the connectivity of reachable objects, making sure that any
objects referenced by a reachable tag, commit, or tree are present. This
speeds up the operation by avoiding reading blobs entirely (though it
does still check that referenced blobs exist). This will detect
corruption in commits and trees, but not do any semantic checks (e.g.,
for format errors). Corruption in blob objects will not be detected at
all.

Unreachable tags, commits, and trees will also be accessed to find the
tips of dangling segments of history. Use *--no-dangling* if you don't
care about this output and want to speed it up further.

#+end_quote

--strict

#+begin_quote
Enable more strict checking, namely to catch a file mode recorded with
g+w bit set, which was created by older versions of Git. Existing
repositories, including the Linux kernel, Git itself, and sparse
repository have old objects that trigger this check, but it is
recommended to check new projects with this flag.

#+end_quote

--verbose

#+begin_quote
Be chatty.

#+end_quote

--lost-found

#+begin_quote
Write dangling objects into .git/lost-found/commit/ or
.git/lost-found/other/, depending on type. If the object is a blob, the
contents are written into the file, rather than its object name.

#+end_quote

--name-objects

#+begin_quote
When displaying names of reachable objects, in addition to the SHA-1
also display a name that describes *how* they are reachable, compatible
with *git-rev-parse*(1), e.g. *HEAD@{1234567890}~25^2:src/*.

#+end_quote

--[no-]progress

#+begin_quote
Progress status is reported on the standard error stream by default when
it is attached to a terminal, unless --no-progress or --verbose is
specified. --progress forces progress status even if the standard error
stream is not directed to a terminal.

#+end_quote

* CONFIGURATION
Everything below this line in this section is selectively included from
the *git-config*(1) documentation. The content is the same as what's
found there:

fsck.<msg-id>

#+begin_quote
During fsck git may find issues with legacy data which wouldn't be
generated by current versions of git, and which wouldn't be sent over
the wire if *transfer.fsckObjects* was set. This feature is intended to
support working with legacy repositories containing such data.

Setting *fsck.<msg-id>* will be picked up by *git-fsck*(1), but to
accept pushes of such data set *receive.fsck.<msg-id>* instead, or to
clone or fetch it set *fetch.fsck.<msg-id>*.

The rest of the documentation discusses *fsck.** for brevity, but the
same applies for the corresponding *receive.fsck.** and *fetch.fsck.**.
variables.

Unlike variables like *color.ui* and *core.editor*, the
*receive.fsck.<msg-id>* and *fetch.fsck.<msg-id>* variables will not
fall back on the *fsck.<msg-id>* configuration if they aren't set. To
uniformly configure the same fsck settings in different circumstances,
all three of them must be set to the same values.

When *fsck.<msg-id>* is set, errors can be switched to warnings and vice
versa by configuring the *fsck.<msg-id>* setting where the *<msg-id>* is
the fsck message ID and the value is one of *error*, *warn* or *ignore*.
For convenience, fsck prefixes the error/warning with the message ID,
e.g. "missingEmail: invalid author/committer line - missing email" means
that setting *fsck.missingEmail = ignore* will hide that issue.

In general, it is better to enumerate existing objects with problems
with *fsck.skipList*, instead of listing the kind of breakages these
problematic objects share to be ignored, as doing the latter will allow
new instances of the same breakages go unnoticed.

Setting an unknown *fsck.<msg-id>* value will cause fsck to die, but
doing the same for *receive.fsck.<msg-id>* and *fetch.fsck.<msg-id>*
will only cause git to warn.

See the *Fsck Messages* section of *git-fsck*(1) for supported values of
*<msg-id>*.

#+end_quote

fsck.skipList

#+begin_quote
The path to a list of object names (i.e. one unabbreviated SHA-1 per
line) that are known to be broken in a non-fatal way and should be
ignored. On versions of Git 2.20 and later, comments (/#/), empty lines,
and any leading and trailing whitespace are ignored. Everything but a
SHA-1 per line will error out on older versions.

This feature is useful when an established project should be accepted
despite early commits containing errors that can be safely ignored, such
as invalid committer email addresses. Note: corrupt objects cannot be
skipped with this setting.

Like *fsck.<msg-id>* this variable has corresponding
*receive.fsck.skipList* and *fetch.fsck.skipList* variants.

Unlike variables like *color.ui* and *core.editor* the
*receive.fsck.skipList* and *fetch.fsck.skipList* variables will not
fall back on the *fsck.skipList* configuration if they aren't set. To
uniformly configure the same fsck settings in different circumstances,
all three of them must be set to the same values.

Older versions of Git (before 2.20) documented that the object names
list should be sorted. This was never a requirement; the object names
could appear in any order, but when reading the list we tracked whether
the list was sorted for the purposes of an internal binary search
implementation, which could save itself some work with an already sorted
list. Unless you had a humongous list there was no reason to go out of
your way to pre-sort the list. After Git version 2.20 a hash
implementation is used instead, so there's now no reason to pre-sort the
list.

#+end_quote

* DISCUSSION
git-fsck tests SHA-1 and general object sanity, and it does full
tracking of the resulting reachability and everything else. It prints
out any corruption it finds (missing or bad objects), and if you use the
*--unreachable* flag it will also print out objects that exist but that
aren't reachable from any of the specified head nodes (or the default
set, as mentioned above).

Any corrupt objects you will have to find in backups or other archives
(i.e., you can just remove them and do an /rsync/ with some other site
in the hopes that somebody else has the object you have corrupted).

If core.commitGraph is true, the commit-graph file will also be
inspected using /git commit-graph verify/. See *git-commit-graph*(1).

* EXTRACTED DIAGNOSTICS
unreachable <type> <object>

#+begin_quote
The <type> object <object>, isn't actually referred to directly or
indirectly in any of the trees or commits seen. This can mean that
there's another root node that you're not specifying or that the tree is
corrupt. If you haven't missed a root node then you might as well delete
unreachable nodes since they can't be used.

#+end_quote

missing <type> <object>

#+begin_quote
The <type> object <object>, is referred to but isn't present in the
database.

#+end_quote

dangling <type> <object>

#+begin_quote
The <type> object <object>, is present in the database but never
/directly/ used. A dangling commit could be a root node.

#+end_quote

hash mismatch <object>

#+begin_quote
The database has an object whose hash doesn't match the object database
value. This indicates a serious data integrity problem.

#+end_quote

* FSCK MESSAGES
The following lists the types of errors *git fsck* detects and what each
error means, with their default severity. The severity of the error,
other than those that are marked as "(FATAL)", can be tweaked by setting
the corresponding *fsck.<msg-id>* configuration variable.

*badDate*

#+begin_quote
(ERROR) Invalid date format in an author/committer line.

#+end_quote

*badDateOverflow*

#+begin_quote
(ERROR) Invalid date value in an author/committer line.

#+end_quote

*badEmail*

#+begin_quote
(ERROR) Invalid email format in an author/committer line.

#+end_quote

*badFilemode*

#+begin_quote
(INFO) A tree contains a bad filemode entry.

#+end_quote

*badName*

#+begin_quote
(ERROR) An author/committer name is empty.

#+end_quote

*badObjectSha1*

#+begin_quote
(ERROR) An object has a bad sha1.

#+end_quote

*badParentSha1*

#+begin_quote
(ERROR) A commit object has a bad parent sha1.

#+end_quote

*badTagName*

#+begin_quote
(INFO) A tag has an invalid format.

#+end_quote

*badTimezone*

#+begin_quote
(ERROR) Found an invalid time zone in an author/committer line.

#+end_quote

*badTree*

#+begin_quote
(ERROR) A tree cannot be parsed.

#+end_quote

*badTreeSha1*

#+begin_quote
(ERROR) A tree has an invalid format.

#+end_quote

*badType*

#+begin_quote
(ERROR) Found an invalid object type.

#+end_quote

*duplicateEntries*

#+begin_quote
(ERROR) A tree contains duplicate file entries.

#+end_quote

*emptyName*

#+begin_quote
(WARN) A path contains an empty name.

#+end_quote

*extraHeaderEntry*

#+begin_quote
(IGNORE) Extra headers found after *tagger*.

#+end_quote

*fullPathname*

#+begin_quote
(WARN) A path contains the full path starting with "/".

#+end_quote

*gitattributesBlob*

#+begin_quote
(ERROR) A non-blob found at *.gitattributes*.

#+end_quote

*gitattributesLarge*

#+begin_quote
(ERROR) The *.gitattributes* blob is too large.

#+end_quote

*gitattributesLineLength*

#+begin_quote
(ERROR) The *.gitattributes* blob contains too long lines.

#+end_quote

*gitattributesMissing*

#+begin_quote
(ERROR) Unable to read *.gitattributes* blob.

#+end_quote

*gitattributesSymlink*

#+begin_quote
(INFO) *.gitattributes* is a symlink.

#+end_quote

*gitignoreSymlink*

#+begin_quote
(INFO) *.gitignore* is a symlink.

#+end_quote

*gitmodulesBlob*

#+begin_quote
(ERROR) A non-blob found at *.gitmodules*.

#+end_quote

*gitmodulesLarge*

#+begin_quote
(ERROR) The *.gitmodules* file is too large to parse.

#+end_quote

*gitmodulesMissing*

#+begin_quote
(ERROR) Unable to read *.gitmodules* blob.

#+end_quote

*gitmodulesName*

#+begin_quote
(ERROR) A submodule name is invalid.

#+end_quote

*gitmodulesParse*

#+begin_quote
(INFO) Could not parse *.gitmodules* blob.

#+end_quote

*gitmodulesLarge*; (ERROR) *.gitmodules* blob is too large to parse.

*gitmodulesPath*

#+begin_quote
(ERROR) *.gitmodules* path is invalid.

#+end_quote

*gitmodulesSymlink*

#+begin_quote
(ERROR) *.gitmodules* is a symlink.

#+end_quote

*gitmodulesUpdate*

#+begin_quote
(ERROR) Found an invalid submodule update setting.

#+end_quote

*gitmodulesUrl*

#+begin_quote
(ERROR) Found an invalid submodule url.

#+end_quote

*hasDot*

#+begin_quote
(WARN) A tree contains an entry named *.*.

#+end_quote

*hasDotdot*

#+begin_quote
(WARN) A tree contains an entry named *..*.

#+end_quote

*hasDotgit*

#+begin_quote
(WARN) A tree contains an entry named *.git*.

#+end_quote

*largePathname*

#+begin_quote
(WARN) A tree contains an entry with a very long path name. If the value
of *fsck.largePathname* contains a colon, that value is used as the
maximum allowable length (e.g., "warn:10" would complain about any path
component of 11 or more bytes). The default value is 4096.

#+end_quote

*mailmapSymlink*

#+begin_quote
(INFO) *.mailmap* is a symlink.

#+end_quote

*missingAuthor*

#+begin_quote
(ERROR) Author is missing.

#+end_quote

*missingCommitter*

#+begin_quote
(ERROR) Committer is missing.

#+end_quote

*missingEmail*

#+begin_quote
(ERROR) Email is missing in an author/committer line.

#+end_quote

*missingNameBeforeEmail*

#+begin_quote
(ERROR) Missing name before an email in an author/committer line.

#+end_quote

*missingObject*

#+begin_quote
(ERROR) Missing *object* line in tag object.

#+end_quote

*missingSpaceBeforeDate*

#+begin_quote
(ERROR) Missing space before date in an author/committer line.

#+end_quote

*missingSpaceBeforeEmail*

#+begin_quote
(ERROR) Missing space before the email in an author/committer line.

#+end_quote

*missingTag*

#+begin_quote
(ERROR) Unexpected end after *type* line in a tag object.

#+end_quote

*missingTagEntry*

#+begin_quote
(ERROR) Missing *tag* line in a tag object.

#+end_quote

*missingTaggerEntry*

#+begin_quote
(INFO) Missing *tagger* line in a tag object.

#+end_quote

*missingTree*

#+begin_quote
(ERROR) Missing *tree* line in a commit object.

#+end_quote

*missingType*

#+begin_quote
(ERROR) Invalid type value on the *type* line in a tag object.

#+end_quote

*missingTypeEntry*

#+begin_quote
(ERROR) Missing *type* line in a tag object.

#+end_quote

*multipleAuthors*

#+begin_quote
(ERROR) Multiple author lines found in a commit.

#+end_quote

*nulInCommit*

#+begin_quote
(WARN) Found a NUL byte in the commit object body.

#+end_quote

*nulInHeader*

#+begin_quote
(FATAL) NUL byte exists in the object header.

#+end_quote

*nullSha1*

#+begin_quote
(WARN) Tree contains entries pointing to a null sha1.

#+end_quote

*treeNotSorted*

#+begin_quote
(ERROR) A tree is not properly sorted.

#+end_quote

*unknownType*

#+begin_quote
(ERROR) Found an unknown object type.

#+end_quote

*unterminatedHeader*

#+begin_quote
(FATAL) Missing end-of-line in the object header.

#+end_quote

*zeroPaddedDate*

#+begin_quote
(ERROR) Found a zero padded date in an author/committer line.

#+end_quote

*zeroPaddedFilemode*

#+begin_quote
(WARN) Found a zero padded filemode in a tree.

#+end_quote

* ENVIRONMENT VARIABLES
GIT_OBJECT_DIRECTORY

#+begin_quote
used to specify the object database root (usually $GIT_DIR/objects)

#+end_quote

GIT_INDEX_FILE

#+begin_quote
used to specify the index file of the index

#+end_quote

GIT_ALTERNATE_OBJECT_DIRECTORIES

#+begin_quote
used to specify additional object database roots (usually unset)

#+end_quote

* GIT
Part of the *git*(1) suite
