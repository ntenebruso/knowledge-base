#+TITLE: Manpages - nix3-build.1
#+begin_quote
*Warning*\\
This program is *experimental* and its interface is subject to change.

#+end_quote

* Name
=nix build= - build a derivation or fetch a store path

* Synopsis
=nix build= [/option/...] /installables/...

* Examples
- Build the default package from the flake in the current directory:

#+begin_example
# nix build
#+end_example

- Build and run GNU Hello from the =nixpkgs= flake:

#+begin_example
# nix build nixpkgs#hello
# ./result/bin/hello
Hello, world!
#+end_example

- Build GNU Hello and Cowsay, leaving two result symlinks:

#+begin_example
# nix build nixpkgs#hello nixpkgs#cowsay
# ls -l result*
lrwxrwxrwx 1 … result -> /nix/store/v5sv61sszx301i0x6xysaqzla09nksnd-hello-2.10
lrwxrwxrwx 1 … result-1 -> /nix/store/rkfrm0z6x6jmi7d3gsmma4j53h15mg33-cowsay-3.03+dfsg2
#+end_example

- Build GNU Hello and print the resulting store path.

#+begin_example
# nix build nixpkgs#hello --print-out-paths
/nix/store/v5sv61sszx301i0x6xysaqzla09nksnd-hello-2.10
#+end_example

- Build a specific output:

#+begin_example
# nix build nixpkgs#glibc.dev
# ls -ld ./result-dev
lrwxrwxrwx 1 … ./result-dev -> /nix/store/dkm3gwl0xrx0wrw6zi5x3px3lpgjhlw4-glibc-2.32-dev
#+end_example

- Build all outputs:

#+begin_example
# nix build "nixpkgs#openssl^*" --print-out-paths
/nix/store/gvad6v0cmq1qccmc4wphsazqbj0xzjsl-openssl-3.0.13-bin
/nix/store/a07jqdrc8afnk8r6f3lnhh4gvab7chk4-openssl-3.0.13-debug
/nix/store/yg75achq89wgqn2fi3gglgsd77kjpi03-openssl-3.0.13-dev
/nix/store/bvdcihi8c88fw31cg6gzzmpnwglpn1jv-openssl-3.0.13-doc
/nix/store/gjqcvq47cmxazxga0cirspm3jywkmvfv-openssl-3.0.13-man
/nix/store/7nmrrad8skxr47f9hfl3xc0pfqmwq51b-openssl-3.0.13
#+end_example

- Build attribute =build.x86_64-linux= from (non-flake) Nix expression
  =release.nix=:

#+begin_example
# nix build --file release.nix build.x86_64-linux
#+end_example

- Build a NixOS system configuration from a flake, and make a profile
  point to the result:

#+begin_example
# nix build --profile /nix/var/nix/profiles/system \
  ~/my-configurations#nixosConfigurations.machine.config.system.build.toplevel
#+end_example

#+begin_quote
(This is essentially what =nixos-rebuild= does.)

#+end_quote

- Build an expression specified on the command line:

#+begin_example
# nix build --impure --expr \
  'with import <nixpkgs> {};
   runCommand "foo" {
     buildInputs = [ hello ];
   }
   "hello > $out"'
# cat ./result
Hello, world!
#+end_example

#+begin_quote
Note that =--impure= is needed because we're using =<nixpkgs>=, which
relies on the =$NIX_PATH= environment variable.

#+end_quote

- Fetch a store path from the configured substituters, if it doesn't
  already exist:

#+begin_example
# nix build /nix/store/rkfrm0z6x6jmi7d3gsmma4j53h15mg33-cowsay-3.03+dfsg2
#+end_example

* Description
=nix build= builds the specified /installables/. *Installables* that
resolve to derivations are built (or substituted if possible). Store
path installables are substituted.

Unless =--no-link= is specified, after a successful build, it creates
symlinks to the store paths of the installables. These symlinks have the
prefix =./result= by default; this can be overridden using the
=--out-link= option. Each symlink has a suffix =-<N>-<outname>=, where
/N/ is the index of the installable (with the left-most installable
having index 0), and /outname/ is the symbolic derivation output name
(e.g. =bin=, =dev= or =lib=). =-<N>= is omitted if /N/ = 0, and
=-<outname>= is omitted if /outname/ = =out= (denoting the default
output).

* Options
- =--dry-run=

  Show what this command would do without doing it.

- =--json=

  Produce output in JSON format, suitable for consumption by another
  program.

- =--no-link=

  Do not create symlinks to the build results.

- =--out-link= / =-o= /path/

  Use /path/ as prefix for the symlinks to the build results. It
  defaults to =result=.

- =--print-out-paths=

  Print the resulting output paths

- =--profile= /path/

  The profile to operate on.

- =--rebuild=

  Rebuild an already built package and compare the result to the
  existing store paths.

- =--stdin=

  Read installables from the standard input. No default installable
  applied.

** Common evaluation options
- =--arg= /name/ /expr/

  Pass the value /expr/ as the argument /name/ to Nix functions.

- =--arg-from-file= /name/ /path/

  Pass the contents of file /path/ as the argument /name/ to Nix
  functions.

- =--arg-from-stdin= /name/

  Pass the contents of stdin as the argument /name/ to Nix functions.

- =--argstr= /name/ /string/

  Pass the string /string/ as the argument /name/ to Nix functions.

- =--debugger=

  Start an interactive environment if evaluation fails.

- =--eval-store= /store-url/

  The *URL of the Nix store* to use for evaluation, i.e. to store
  derivations (=.drv= files) and inputs referenced by them.

- =--impure=

  Allow access to mutable paths and repositories.

- =--include= / =-I= /path/

  Add /path/ to search path entries used to resolve *lookup paths*

  This option may be given multiple times.

  Paths added through =-I= take precedence over the =nix-path=
  configuration setting and the =NIX_PATH= environment variable.

- =--override-flake= /original-ref/ /resolved-ref/

  Override the flake registries, redirecting /original-ref/ to
  /resolved-ref/.

** Common flake-related options
- =--commit-lock-file=

  Commit changes to the flake's lock file.

- =--inputs-from= /flake-url/

  Use the inputs of the specified flake as registry entries.

- =--no-registries=

  Don't allow lookups in the flake registries.

  #+begin_quote
  *DEPRECATED*

  #+end_quote

  #+begin_quote
  Use =--no-use-registries= instead.

  #+end_quote

- =--no-update-lock-file=

  Do not allow any updates to the flake's lock file.

- =--no-write-lock-file=

  Do not write the flake's newly generated lock file.

- =--output-lock-file= /flake-lock-path/

  Write the given lock file instead of =flake.lock= within the top-level
  flake.

- =--override-input= /input-path/ /flake-url/

  Override a specific flake input (e.g. =dwarffs/nixpkgs=). This implies
  =--no-write-lock-file=.

- =--recreate-lock-file=

  Recreate the flake's lock file from scratch.

  #+begin_quote
  *DEPRECATED*

  #+end_quote

  #+begin_quote
  Use =nix flake update= instead.

  #+end_quote

- =--reference-lock-file= /flake-lock-path/

  Read the given lock file instead of =flake.lock= within the top-level
  flake.

- =--update-input= /input-path/

  Update a specific flake input (ignoring its previous entry in the lock
  file).

  #+begin_quote
  *DEPRECATED*

  #+end_quote

  #+begin_quote
  Use =nix flake update= instead.

  #+end_quote

** Logging-related options
- =--debug=

  Set the logging verbosity level to ‘debug'.

- =--log-format= /format/

  Set the format of log output; one of =raw=, =internal-json=, =bar= or
  =bar-with-logs=.

- =--print-build-logs= / =-L=

  Print full build logs on standard error.

- =--quiet=

  Decrease the logging verbosity level.

- =--verbose= / =-v=

  Increase the logging verbosity level.

** Miscellaneous global options
- =--help=

  Show usage information.

- =--offline=

  Disable substituters and consider all previously downloaded files
  up-to-date.

- =--option= /name/ /value/

  Set the Nix configuration setting /name/ to /value/ (overriding
  =nix.conf=).

- =--refresh=

  Consider all previously downloaded files out-of-date.

- =--repair=

  During evaluation, rewrite missing or corrupted files in the Nix
  store. During building, rebuild missing or corrupted store paths.

- =--version=

  Show version information.

** Options that change the interpretation of *installables*
- =--expr= /expr/

  Interpret /installables/ as attribute paths relative to the Nix
  expression /expr/.

- =--file= / =-f= /file/

  Interpret /installables/ as attribute paths relative to the Nix
  expression stored in /file/. If /file/ is the character -, then a Nix
  expression will be read from standard input. Implies =--impure=.

  *Note*

  See =man nix.conf= for overriding configuration settings with command
  line flags.
