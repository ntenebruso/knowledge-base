#+TITLE: Manpages - git-clean.1
* NAME
git-clean - Remove untracked files from the working tree

* SYNOPSIS
#+begin_example
git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] [<pathspec>...]
#+end_example

* DESCRIPTION
Cleans the working tree by recursively removing files that are not under
version control, starting from the current directory.

Normally, only files unknown to Git are removed, but if the *-x* option
is specified, ignored files are also removed. This can, for example, be
useful to remove all build products.

If any optional *<pathspec>...* arguments are given, only those paths
that match the pathspec are affected.

* OPTIONS
-d

#+begin_quote
Normally, when no <pathspec> is specified, git clean will not recurse
into untracked directories to avoid removing too much. Specify -d to
have it recurse into such directories as well. If a <pathspec> is
specified, -d is irrelevant; all untracked files matching the specified
paths (with exceptions for nested git directories mentioned under
*--force*) will be removed.

#+end_quote

-f, --force

#+begin_quote
If the Git configuration variable clean.requireForce is not set to
false, /git clean/ will refuse to delete files or directories unless
given -f. Git will refuse to modify untracked nested git repositories
(directories with a .git subdirectory) unless a second -f is given.

#+end_quote

-i, --interactive

#+begin_quote
Show what would be done and clean files interactively. See “Interactive
mode” for details. Configuration variable *clean.requireForce* is
ignored, as this mode gives its own safety protection by going
interactive.

#+end_quote

-n, --dry-run

#+begin_quote
Don't actually remove anything, just show what would be done.
Configuration variable *clean.requireForce* is ignored, as nothing will
be deleted anyway.

#+end_quote

-q, --quiet

#+begin_quote
Be quiet, only report errors, but not the files that are successfully
removed.

#+end_quote

-e <pattern>, --exclude=<pattern>

#+begin_quote
Use the given exclude pattern in addition to the standard ignore rules
(see *gitignore*(5)).

#+end_quote

-x

#+begin_quote
Don't use the standard ignore rules (see *gitignore*(5)), but still use
the ignore rules given with *-e* options from the command line. This
allows removing all untracked files, including build products. This can
be used (possibly in conjunction with /git restore/ or /git reset/) to
create a pristine working directory to test a clean build.

#+end_quote

-X

#+begin_quote
Remove only files ignored by Git. This may be useful to rebuild
everything from scratch, but keep manually created files.

#+end_quote

* INTERACTIVE MODE
When the command enters the interactive mode, it shows the files and
directories to be cleaned, and goes into its interactive command loop.

The command loop shows the list of subcommands available, and gives a
prompt "What now> ". In general, when the prompt ends with a single />/,
you can pick only one of the choices given and type return, like this:

#+begin_quote
#+begin_example
    *** Commands ***
        1: clean                2: filter by pattern    3: select by numbers
        4: ask each             5: quit                 6: help
    What now> 1
#+end_example

#+end_quote

You also could say *c* or *clean* above as long as the choice is unique.

The main command loop has 6 subcommands.

clean

#+begin_quote
Start cleaning files and directories, and then quit.

#+end_quote

filter by pattern

#+begin_quote
This shows the files and directories to be deleted and issues an "Input
ignore patterns>>" prompt. You can input space-separated patterns to
exclude files and directories from deletion. E.g. "*.c *.h" will exclude
files ending with ".c" and ".h" from deletion. When you are satisfied
with the filtered result, press ENTER (empty) back to the main menu.

#+end_quote

select by numbers

#+begin_quote
This shows the files and directories to be deleted and issues an "Select
items to delete>>" prompt. When the prompt ends with double />>/ like
this, you can make more than one selection, concatenated with whitespace
or comma. Also you can say ranges. E.g. "2-5 7,9" to choose 2,3,4,5,7,9
from the list. If the second number in a range is omitted, all remaining
items are selected. E.g. "7-" to choose 7,8,9 from the list. You can say
/*/ to choose everything. Also when you are satisfied with the filtered
result, press ENTER (empty) back to the main menu.

#+end_quote

ask each

#+begin_quote
This will start to clean, and you must confirm one by one in order to
delete items. Please note that this action is not as efficient as the
above two actions.

#+end_quote

quit

#+begin_quote
This lets you quit without doing any cleaning.

#+end_quote

help

#+begin_quote
Show brief usage of interactive git-clean.

#+end_quote

* CONFIGURATION
Everything below this line in this section is selectively included from
the *git-config*(1) documentation. The content is the same as what's
found there:

clean.requireForce

#+begin_quote
A boolean to make git-clean refuse to delete files unless -f is given.
Defaults to true.

#+end_quote

* SEE ALSO
*gitignore*(5)

* GIT
Part of the *git*(1) suite
